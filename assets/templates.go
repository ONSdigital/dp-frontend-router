// +build production
// Code generated by go-bindata.
// sources:
// templates/error.tmpl
// templates/main.tmpl
// templates/partials/footer.tmpl
// templates/partials/header.tmpl
// redirects/redirects.csv
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesErrorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x46\xbe\x3b\xd5\x5e\x51\x1a\x21\x01\x12\x48\x70\x5b\xc4\x71\x35\xb1\x27\xb5\x55\xc7\x63\x79\x26\xe9\x56\x4b\xfe\x1d\xa5\xb0\x2c\xad\x7a\xe2\xf4\xc6\xcf\x6f\x34\xe3\xf7\xdc\xf9\xb8\x80\x4b\x28\xb2\x37\x05\x0f\x64\x03\xa1\xa7\x0a\x92\x50\xc9\xf4\xcd\xbf\xf7\xa7\x8a\xa5\x50\xdd\xd8\xf0\x70\xa7\xe9\xe9\x49\xa3\x26\x82\x31\xcd\x12\xac\x0d\x98\x46\x6b\x07\x56\xe5\xc9\xf4\x2f\x2f\xd0\x7e\xaa\x95\x6b\xfb\x78\x11\xad\x6b\xb7\x0b\x0f\x7d\xd3\xed\x7c\x5c\xfa\xe6\x15\xef\xcc\x83\x82\x99\x92\xb5\x13\xd6\x9b\x85\x0e\x35\x7a\xbb\xa9\xee\xf1\x8e\x13\x78\x92\xa3\x72\xb1\x17\x62\x9c\x53\xb2\xa7\xe8\x35\x6c\x72\xac\x1a\x5d\xa2\xeb\xc6\x81\x9f\x61\xe0\x67\x6b\x0b\x7a\x4f\xfe\x77\x5d\xc9\x5b\x8f\xf5\x78\x7d\xb2\x56\xa8\x60\x45\x25\x6f\x13\x8d\x0a\x42\x4e\x23\x67\xf2\x66\x7b\xcd\x7f\x6f\xa9\x27\xb6\x1a\x62\xf5\x62\xfa\xe6\xcd\xb4\x8f\x24\xae\xc6\xb2\x4d\x80\x9f\x20\x38\xd2\xe7\xc7\x6f\x5f\x61\x5d\x9b\xae\xf4\x5f\x46\x38\xf3\x0c\xa2\x31\x25\xa0\xec\x78\xce\xba\xf9\x56\x79\x48\x34\x09\x94\x44\x28\x04\x1d\x42\xa8\x34\xee\xcd\x84\x31\x29\xbf\x3b\xd1\xd0\x3a\x9e\x26\xca\x2a\xef\x39\x4b\x7b\xe0\xa5\x9d\x8f\x06\x2e\x31\xee\xcd\x07\xce\x8a\x4e\xe1\xbb\x98\xde\xfd\xa9\x67\xe9\x76\xd8\xb7\xf0\x83\x00\x0b\x27\x3e\x44\x21\x18\xb9\x02\xe6\x33\xc4\xec\x38\x2f\x94\x23\x65\x47\xa0\x21\x0a\x4c\x78\x86\x80\x0b\x81\xc3\x59\xc8\xb7\xdd\xae\xfc\xcd\xfc\x16\xde\x22\xb9\xfe\x13\xaf\xf8\x2b\x00\x00\xff\xff\x38\x7a\x05\x98\xac\x02\x00\x00")

func templatesErrorTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorTmpl,
		"templates/error.tmpl",
	)
}

func templatesErrorTmpl() (*asset, error) {
	bytes, err := templatesErrorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.tmpl", size: 684, mode: os.FileMode(420), modTime: time.Unix(1522933658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x61\x6f\xdb\x38\x12\xfd\xbc\xf9\x15\xb3\x5a\xe0\x64\x37\xa2\x64\x6d\x2e\x3e\x27\xb6\x02\xa4\xdb\x60\x2f\x40\xdb\x04\xd7\x14\x77\x87\x20\x40\x69\x69\x24\xb1\xa5\x48\x95\x1c\xd9\x35\x1c\xfd\xf7\x03\x65\x3b\x71\xdc\x34\x97\x45\xd0\x2f\xa2\xa8\x99\x79\xef\xcd\x70\x48\xd3\x93\x5f\xdf\x5c\xfc\x71\xf5\xdf\xcb\x33\x28\xa9\x92\x27\x7b\x93\xcd\x80\x3c\x3b\xd9\x03\x00\x98\x90\x20\x89\x27\xe7\x8a\xd0\x28\x2e\xc1\xa2\x99\xa1\x01\x34\x46\x1b\x60\x70\x91\xe7\x22\x45\xc8\xb5\x81\xf7\x9c\x84\x76\x2e\x1f\x88\x93\xb0\x24\x52\x3b\x89\x56\xd1\x2b\xa4\x0a\x89\x43\x49\x54\x33\xfc\xda\x88\x59\xe2\xfd\x87\x7d\x3c\x65\x7f\xe8\xaa\xe6\x24\xa6\x12\x3d\x48\xb5\x22\x54\x94\x78\xe7\x67\x09\x66\x05\x06\x69\x69\x74\x85\x49\xec\x41\xb4\x0d\x92\x96\xdc\x58\xa4\xc4\x6b\x28\x67\x23\xef\xa1\x6d\x83\x31\x17\x19\x95\x49\x86\x33\x91\x22\xeb\x26\x81\x50\x82\x04\x97\xcc\xa6\x5c\x62\x12\x87\x83\xa0\xb1\x68\xba\x29\x9f\xca\x8e\x47\xf1\x0a\x13\x6f\x26\x70\x5e\x6b\x43\xde\x36\xf2\xca\x94\x6b\x53\x71\x62\x19\x12\xa6\x2e\xe1\x2d\xd5\x84\x12\xeb\x52\x2b\x4c\x94\x7e\x24\x92\x4a\xac\x90\xa5\x5a\x6a\xb3\x15\xf4\xdb\xe1\xe8\xf0\xe8\xf0\xf5\x23\xfe\xbc\xae\x25\xb2\x4a\x4f\x85\x44\x36\xc7\x29\xe3\x75\xcd\x2c\x71\x6a\x2c\x9b\x72\xc3\x2c\x2d\x1e\x14\x6d\x07\x49\x0a\xf5\x05\x0c\xca\xc4\xb3\xa5\x36\x94\x36\x04\x22\x75\x7a\x4b\x83\x79\xe2\xb9\x85\xb0\xc7\x51\x94\x66\x2a\xd4\xca\x86\x85\x9e\x85\xcd\x97\x88\x5b\x8b\x64\x23\x51\xf1\x02\x6d\x94\xf3\x99\x8b\x09\x45\xaa\x3d\xa0\x45\x8d\x89\xd7\x59\xa2\x6f\xac\xc3\x3a\xd9\xdb\xfb\xe5\x97\xe5\xf2\xd3\xe4\x57\xc6\xae\x45\x0e\x92\x10\xce\xcf\x60\x74\x73\xf2\x09\x6e\xc1\xf2\x1c\xff\x79\xf5\xee\x6d\xdb\x76\x8a\x1e\x6a\x72\xe2\x6d\x89\x48\x1b\x41\xcb\x65\x78\xc9\xc9\xb5\xd9\x5b\x31\x35\xdc\x2c\x4e\x3b\x29\x97\x9c\xca\xb6\x8d\x52\x6b\x23\x2d\x33\x26\x30\x4c\xad\xf5\x4e\x36\xbc\xd7\xa8\x32\x91\xdf\x30\xf6\x18\xe3\x96\xb2\xf3\x33\x38\xfa\x39\xaa\x04\xb2\xa3\xb5\xa6\x3b\xce\x1f\xaa\x7a\x50\xad\x82\xd6\xb2\xdc\x87\x9f\xa2\xad\xe2\x42\xed\x6a\x63\xec\x09\x7d\x93\x68\xb5\xf5\x27\x53\x9d\x2d\x20\x95\xdc\x5a\xc7\x03\xe1\xd5\xa2\x46\x68\x5b\xb7\xe2\x2b\x24\x20\xac\x6a\xc9\x09\xc1\xab\xb9\x71\xdb\xca\x76\xb1\x68\x3c\x08\xa1\x6d\xf7\xd6\xfd\xcc\x85\x02\x91\x25\x9e\x7b\xf1\xc0\x68\x89\x9b\x77\xe2\x53\xa1\x32\xfc\x96\x78\x2c\x5e\x0b\x5c\x41\x2f\x04\xca\x6c\x5d\x82\x49\x97\xc3\x93\xac\xb9\xd6\xb4\xc3\x6a\x53\x23\x6a\xda\x60\xf6\xf2\x46\x75\x7b\xb5\x27\x02\x1b\xe8\xa0\x08\x4c\xc0\x83\xaa\xbf\x14\xd7\xfe\x9f\x5a\x17\x12\x4f\x15\x97\x0b\x77\x62\x5d\x4c\x3f\x63\x4a\xfe\x4d\x62\xc6\xe2\xda\xdc\x24\xee\x71\x7b\x7b\x17\xdf\x5f\x6e\x20\x9d\x21\xfc\x9a\xac\x86\xdb\xdb\xeb\x9b\x7e\x58\x37\xb6\xec\x71\x53\x34\x15\x2a\xb2\xfd\x36\xe8\x8c\x32\x89\x5f\x29\x9c\xc3\x1b\x4e\xd8\xeb\x8f\x79\x62\xc3\xd4\x20\x27\x3c\x93\xe8\x1c\x7b\xba\x1f\xac\x41\xab\xc4\x86\x05\xd2\xda\x60\x5f\x2f\xae\x78\xf1\x9e\x57\xd8\xd3\xfd\xeb\xc1\xcd\x98\x87\xdc\x2e\x54\x9a\xc4\x63\x1e\x5a\x93\x26\xc5\xb8\x0a\x6b\x6e\x50\xd1\x7b\x9d\x61\x28\x94\x45\x43\xaf\x31\xd7\x06\x7b\x2e\xbd\x35\x6a\xdb\xef\xcd\x85\xca\xf4\x3c\xc8\x74\xda\x69\x0b\xfc\x55\x7d\xfc\xc0\x8f\xa2\xf9\x7c\x1e\x16\x5d\x11\x18\xdf\x54\x21\x4c\x75\x15\xdd\xcf\x3e\x5b\x3f\xf0\x0b\xee\xf7\xc7\x6b\xc8\x82\xf7\xfc\x55\x12\x7e\x00\xfe\xc7\x53\x76\x38\x1c\x1d\xfd\x3e\x38\xf8\x07\x3b\xf0\x03\x58\xfa\x5c\x4a\x3d\x3f\x55\x69\xa9\x8d\x7f\x0c\x64\x1a\x6c\x1f\xc4\x5a\x54\x99\x8b\xac\x79\x81\xee\xa8\xed\x82\xdc\xc4\x3f\x06\xa9\xd3\xee\x87\x24\xac\x39\x95\xee\x20\x84\x7d\x28\x90\x3e\x20\x37\x69\xd9\xeb\xc3\xfe\xbd\x47\xc9\x6d\x79\x0f\xbc\x59\xa4\x6d\xef\xe5\x5d\x57\xb9\xe6\x89\x5e\xc1\xd5\xc5\x9b\x0b\x60\xf0\xef\x12\x15\xd8\xce\x09\x84\x85\x4a\xcf\x30\x03\xd2\x60\x50\x65\x68\xd0\xc0\x1c\x7d\x29\x41\xe1\xea\x33\xcf\xb2\x8d\x37\xa1\xa9\x40\x28\xd2\xe0\xf4\xc2\x9f\xa7\x60\xd0\xd6\x5a\x59\xdc\xa2\x8a\x22\x10\x79\xef\xfb\x4c\x92\x24\x01\x3f\x5a\x21\xf9\x0f\xc4\x45\x51\x37\xcc\xb8\x01\xd5\x54\x53\x34\x17\xf9\xbf\xd0\x36\x92\x2c\x24\xb0\x5c\xfe\x26\x72\xc7\xd3\x48\x0a\x77\xcc\x6d\x0b\xcb\xe5\x13\x26\x94\x16\xdb\x16\x06\x2e\x7d\x91\xb7\xed\xf8\x7b\x52\x83\xd4\x18\x75\x5f\xd6\x75\xa6\xfb\xe0\xff\x6d\x07\x31\xf1\x61\x7f\x57\xdf\x0e\x60\x0b\x8e\x11\x1e\xc9\xed\x71\x9a\xef\xc2\x5f\x45\x77\x87\xdf\x7d\xd4\xa6\x95\xf7\xf6\xee\x3c\xdf\x21\xb7\x8d\x41\x20\x51\x21\x68\xb5\x5a\x0e\x06\xa9\xc1\x4c\x90\x5b\x34\xf7\x03\x77\x1c\x45\x25\xca\x3a\xbc\xeb\x65\x77\xab\xe8\xba\x7b\xd5\xf2\x77\xdf\xa3\xaa\x83\x13\xaa\x60\x0e\x90\x69\xc5\xa6\xba\x51\x29\x32\x87\x1b\xed\xb6\x98\xf3\x31\x71\xdc\xeb\x2f\xb7\xdb\x19\x67\xa8\xc8\xbd\x5c\x89\x0a\x2f\xd4\xa5\x6b\xe8\x00\xfc\xb8\x7b\xc4\xec\x60\x00\x16\x53\xad\x32\xeb\xfa\x1d\x7c\xa5\x55\x77\xad\xe2\x1d\xa6\x7f\x0c\x31\xb4\xfd\x71\xfb\x28\xd7\xc1\x33\xb9\x7e\x77\x8f\x83\x98\x0d\x5f\xc0\x35\x7c\x26\x97\xdb\xeb\xfe\x30\x66\xf1\xe8\x05\x64\xf1\xe8\x99\x6c\x7f\xef\xaa\x38\x72\xa9\xbd\x24\xb7\xc1\x33\xe9\x0e\xbb\xe4\x06\x5d\x76\x2f\x4a\xef\xb9\x84\xc3\x55\x7e\x83\x78\xff\xaf\xb0\x3d\x03\x78\xd0\x3d\x58\xfc\xac\x2c\xd6\xb0\x16\xc9\x81\xe8\x86\x7a\xeb\x56\x0f\xe2\x78\x30\x18\xfc\xd0\xe1\x20\x0e\x0e\x9e\x74\x18\xc6\xc1\xf0\x49\x87\x78\x14\x07\xf1\xe8\x69\x8c\x41\x1c\x0c\x07\xff\x07\x65\xe0\x60\xb6\x9d\x26\xd1\xe6\x36\x30\x89\xdc\xad\xc6\x8d\xab\xbf\x39\xff\x0b\x00\x00\xff\xff\x7a\x33\xfb\x9b\xfe\x0c\x00\x00")

func templatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainTmpl,
		"templates/main.tmpl",
	)
}

func templatesMainTmpl() (*asset, error) {
	bytes, err := templatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.tmpl", size: 3326, mode: os.FileMode(420), modTime: time.Unix(1523616070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x4d\x6f\xe3\x36\x10\xbd\xef\xaf\x20\x78\xae\xcc\x60\x03\xf4\x50\xc8\x02\x82\xb4\xd9\x2e\x1a\x24\x87\xa4\xe8\x31\x18\x93\x23\x71\x6a\x8a\x14\xc8\x91\x14\x77\xb1\xff\xbd\xa0\x15\xc7\x8e\xed\x60\x3f\xd0\x36\x46\x6f\xe4\xcc\xbc\xe1\x1b\xf3\x71\x34\x2e\xeb\x10\x18\xa3\xd0\x0e\x52\x9a\xcb\x2e\x92\xe7\xa2\xb0\x64\x50\x56\xef\x84\x10\xa5\x7d\xbf\xf1\x0d\x94\x7a\x70\x6e\x65\xc9\x18\xf4\xb2\xba\x9a\x90\x8e\xfc\x32\x95\xca\xbe\x9f\xe2\x0d\x0d\x1b\xc0\x94\x7a\xca\xb3\xe7\x1a\x23\x74\xdd\x8e\x2f\xbb\x3d\x0c\x3b\xdb\xa3\xb9\x0a\x0f\x83\xd0\xc1\x15\x19\x2f\x5f\x46\xef\x01\x74\x70\xeb\xc8\xc2\x35\x45\xf0\x58\xb0\xa5\x68\x26\x4b\x6b\xb6\x96\xc3\x24\xeb\xa2\xcf\x0f\xcf\x7d\x78\xb0\x08\x86\x7c\x23\xab\x5f\xd1\x75\xa5\xb2\xe7\x47\xb1\xbd\x3b\x86\x75\x94\xf8\xe8\x59\x19\xe2\xe8\x18\x84\x18\xdb\xd7\x20\x19\x05\xc2\x46\xac\xe7\xf2\xd3\xa7\xd9\x3d\x3c\x06\x1f\xda\xd5\xcf\xa1\x05\xf2\x9f\x3f\x2b\x8b\xae\x53\xa0\x35\xa6\x44\x0b\x72\xc4\x2b\x59\x5d\xec\x6e\x4b\x05\xaf\xb1\x51\x8e\xfe\x63\xa2\x3a\x84\x25\x61\x02\x6f\xba\x48\x03\xe8\x95\xac\x2e\x27\x93\x00\x6f\xc4\x93\xf1\xa4\x28\x33\xc6\x36\x13\xd6\xc1\x1b\x62\x0a\x3e\xc9\xea\x3e\xdb\xd6\x8c\xb7\xd6\x6f\x27\x5d\xaa\xde\x1d\x2a\x5b\x19\x1a\xde\x4c\xef\x17\x8b\xd0\xb3\xb8\xbd\xb9\x3b\x6d\xd1\x43\xa6\xd9\x27\x35\x5a\xe0\x11\x4d\x90\xd5\x1f\x16\x58\x8c\x28\x4c\x38\x15\xf1\x6c\x38\x6a\x88\x88\x31\xc9\xea\x72\x5a\x9c\x1c\xbf\xe0\x19\x34\xf7\x99\xe1\xb4\x14\xfd\xc9\x90\xf4\x38\x26\x59\xdd\xe0\x78\x32\x8c\x36\x3f\x1b\x47\xf0\xa9\x83\x88\x5e\xaf\xc0\x9b\x26\x0c\x18\x3d\x78\x8d\xaa\x8e\x88\x26\xb4\xa1\x26\x5f\x87\xd8\x42\xee\x0e\x75\x20\x59\x5d\x4d\x0e\x11\x6a\xf1\x71\xeb\xfa\x5f\xf4\x8d\xcb\xe0\x3d\x6a\x16\x23\xb1\x5d\xcb\xe7\x54\xba\x87\x65\xee\xd2\x4f\x4a\xf1\x48\xcc\x18\x67\x3a\xb4\xea\xf6\xe6\x4e\x6e\x72\x92\x0e\xfe\x69\x0a\x12\x0c\xb1\x41\x9e\xcb\x87\x85\x03\xbf\x94\xd5\xfd\x84\x79\x0b\xe5\x6d\x68\x8f\xe3\x38\xab\x41\xe3\x22\x84\xe5\x37\x71\xbf\x7a\x02\xbd\x35\xf9\x3c\x33\xa2\x21\xbf\x26\xaf\x43\xdb\x81\x5f\xa9\x50\xd7\xa4\xb1\xa8\x43\x4e\x9c\xdf\x00\xb8\x22\x31\x30\x25\x26\x9d\xbe\xaa\xbe\xeb\x75\xde\x8f\xdf\xf1\x7a\xfe\xb9\xfa\xba\x7e\xe1\x48\xcf\x9a\x30\x18\x74\x34\x60\x5c\xad\xab\x04\xad\x43\xef\x39\xa9\xdf\x7f\xbb\xbd\xb9\x53\xa9\x5f\x24\x1d\x69\x81\x31\xe5\x76\xf6\x55\xd5\xfd\xd2\x02\x39\x01\x0e\x23\xff\x8b\x73\xc5\xbe\xa9\x54\x3b\x83\xf9\x0b\xe7\x97\x06\xfa\xc3\xf1\xdd\x91\x46\x9f\x70\xef\xe7\x2c\xa9\x6d\x8e\x07\x3e\x3c\x50\xdb\x48\x01\x8e\xe7\xf2\xf6\xc3\xb5\x14\x23\x19\xb6\x73\xf9\xe3\x99\x14\x29\xea\xb9\x54\xd4\x36\x2a\x34\x6e\xd6\xe5\x7e\xf3\x32\x6b\xf7\x5a\x4e\xc6\x47\x16\x2d\xc4\x86\x7c\xe1\xb0\xe6\x22\xb5\x45\x71\x76\x78\xc7\x17\x2e\xb7\x46\xcf\xe8\x59\x50\x12\x30\x00\x39\x58\x38\x14\xbd\x37\x18\x05\x5b\xcc\xb7\x7f\xe4\xe2\xb6\x82\x78\xd2\xfb\x46\xcf\x10\xb5\xa5\x01\x53\x56\xc7\xac\x5f\x2a\x13\xb4\x0a\x1d\xfa\x62\xfa\x50\xb4\xe8\x79\xa2\xa9\x51\x0d\x18\x13\x05\xaf\xce\xd5\xa1\x12\x6e\x3b\xf4\xe2\xc3\x33\x46\x5c\x4f\x18\x31\x9c\xcf\xce\xb2\x32\x44\x99\x3a\xf0\xbb\xd4\xc4\x9a\x1f\x3e\x72\xfe\x1e\xe5\x6e\x4f\x8d\xcd\x85\x83\x73\xb2\x2a\x55\x0e\xaf\x7e\x10\xf8\xa8\xb1\x63\x31\x5a\x8c\x28\x02\x5b\x8c\x23\x25\x14\xf9\x15\xa2\xd9\x53\x49\xf7\x42\x23\xbb\xb2\x78\xde\xec\xac\xb2\x16\xc8\xe4\x3f\x91\x38\x76\x21\xe6\xa3\x9f\x35\xff\x67\x2a\xb6\x66\xfa\x0b\x33\xa1\xd7\x81\xad\xf9\x4e\xa0\x6b\xbe\x0c\x2c\xd5\x24\x96\xea\xdd\xdf\x01\x00\x00\xff\xff\x67\x15\x8a\xeb\x19\x0f\x00\x00")

func templatesPartialsFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterTmpl,
		"templates/partials/footer.tmpl",
	)
}

func templatesPartialsFooterTmpl() (*asset, error) {
	bytes, err := templatesPartialsFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.tmpl", size: 3865, mode: os.FileMode(420), modTime: time.Unix(1523616070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xb8\x71\x2f\xdd\x03\xad\x61\x2f\x5b\x0b\x59\xc0\xd6\x05\x68\x80\xb6\x1b\x92\xf6\x61\x28\x82\xf4\x22\x9e\x25\xce\x14\xa9\x91\xb4\x13\x43\xd3\x77\x1f\x68\xfd\x8d\x2d\x39\x09\x56\x6c\xad\x9f\xa4\xd3\xfd\xbf\x1f\x7f\x3c\xc7\x39\xa1\x20\x9b\x3c\x03\x00\x88\x11\x52\x85\xce\x2d\x99\x5b\xcb\x52\x49\xbd\x66\x90\x5b\x5a\x2d\xd9\xb7\x05\x4a\xcd\xc0\xe3\x8d\xd4\x82\xee\x96\xec\x7b\x96\x5c\xae\x65\x09\xde\x40\xf8\x04\xa9\xd1\x9e\xb4\x8f\x23\x6c\x5d\x09\xb9\x05\x29\x96\xac\xc4\x8c\x7e\x47\x9f\xb3\xce\x75\x2e\x05\xb1\xa4\xaa\x16\x1f\x2e\xce\xeb\x3a\x8e\x84\xdc\x26\xcf\x06\x9b\x56\xeb\xd6\x62\x59\x92\x65\x8d\xb7\xc3\xaf\x4d\xd2\x90\x1a\xc5\x83\xe2\x48\xeb\x50\x33\x35\x6a\xaf\xc6\x55\xc6\x8d\x26\xee\x73\x69\x45\x23\x29\xc4\x20\x39\xf0\xd0\x36\x23\xe4\xaf\x4c\x66\xf8\xb8\x15\xd1\x84\x6e\xf8\x55\xd5\xa7\xf8\x1b\xce\x3f\xca\x15\x28\x4f\x70\x7e\x06\x3f\x5d\x25\x9f\xe0\x6f\x70\xb8\xa2\xd7\xef\xdf\xbe\xa9\xeb\x49\xbb\x7d\x2c\x59\x64\x5d\xc6\x21\x20\x03\x67\xd3\x25\xcb\xbd\x2f\xdd\xcb\x28\x4a\x85\x5e\x18\xed\x16\x99\xd9\x2e\x36\xeb\x08\x9d\x23\xef\x22\x59\x60\x46\x2e\x32\xda\xf1\x60\x13\x6d\x7f\xe8\x9f\x17\xa5\xce\x18\xa0\xf2\x4b\xf6\xdb\x6a\x25\x53\x82\x95\xb1\xf0\x0e\xbd\x34\x1a\x15\x5c\x7a\xf4\xd2\x79\x99\xba\x53\xb5\x7c\x24\x2d\xe4\xea\x8a\xf3\xc7\x54\x31\xaa\x3e\x6b\xaa\x7f\x71\x95\x04\xc9\xff\xd6\x02\xb7\xfd\x0f\x5b\xd0\xe3\x7e\x10\xec\x71\x7d\x4f\x34\x03\x4b\x7f\x6b\x1a\x10\xba\x1e\x97\x23\x51\x38\x2e\x9c\xbb\x02\x4a\x2b\xb5\xe7\xbc\x39\x3e\xc7\x09\x08\xd5\xc0\x15\x75\xb6\xc1\x8c\xfa\xe3\xd6\x0b\xa6\xcb\x8c\x85\x3f\xd4\xbc\xbe\xf6\xd2\x2b\x62\xc9\xab\x1c\x75\x46\xd0\xc9\x5f\xc6\x91\xf0\x73\x5e\xc4\xb1\x17\xe9\xa9\x98\x89\xda\x34\x58\xae\x80\xfe\x82\xc5\x9b\xd6\x02\x18\x69\x56\xd7\x03\x09\x0d\xae\xc2\xf9\x03\x99\x1a\xdd\xd6\xdf\x1d\xc5\x28\xdd\x2d\xaa\x6a\x71\x29\x3d\xfd\x6a\x02\x0f\xd5\x75\x47\x2c\x2c\x79\xb5\x2b\x2c\x52\x06\xcf\x5f\xfd\xf1\x5d\x98\x4f\x55\x91\x16\x27\x10\x38\x91\x50\xba\x7b\x6a\x42\xb3\xd9\x9c\xe9\x4c\x49\x97\xc3\xf3\xb3\x77\x0f\x66\x13\x47\x42\x4c\x8c\x38\x12\xea\x49\x20\x73\x94\x1a\x2d\xd0\xee\xb8\xc6\x2d\x3c\x1e\x72\x0f\x20\x6d\xd3\x20\x4d\xe3\x96\xf7\x11\xd8\x64\xcc\xd0\x27\xe7\xe1\x4f\x17\x5e\x78\xaa\x8c\xa6\x46\x34\x07\x46\x25\x67\xfc\x3c\x80\xa5\xd1\xc5\x75\x18\x5f\xaf\xe1\x28\x81\x81\xcc\xab\x0a\x16\xef\xf1\xce\x68\x53\xec\x9a\x99\x41\x5d\x47\x96\x14\xa1\xa3\x14\x15\x05\x5f\x2c\xb9\x68\x04\xd0\x49\x8e\x8e\xfb\x30\x11\x25\xbf\xec\xda\x0a\xf2\xb9\x11\x46\x99\x6c\xc7\x92\xb7\xc3\xcb\x57\x5c\x92\xa6\x5b\x17\x6a\x11\x12\xbf\xe2\x2a\xf0\xc6\x6c\xfc\xc6\xb1\xe4\xe7\xf0\xf0\xe5\x14\x32\xb0\xdc\x64\x49\x1e\x6d\x46\x7e\xc9\xae\x6f\x14\x86\x77\x4b\x6a\xc9\xb4\x31\x25\x69\xb2\xa0\x8d\xa5\x15\x59\x4b\xb6\x2b\xbe\xbb\xd0\x6f\x94\xc9\xc6\x37\x3a\x4b\x7e\x51\x26\x7b\x62\xd9\x71\xb4\x39\x4d\x89\xa3\xd7\xf1\xe3\x88\x24\x4b\x2b\x8b\x8e\x22\xa7\x89\x2f\xd6\x78\x48\xb2\x1b\xd5\x99\x87\x7e\xf0\xb0\xfc\x5a\xa3\xa6\x56\x89\xd1\x50\xee\xa9\x9e\x1c\x4a\x8c\xdd\xda\x1d\x6c\xda\x0c\xd9\x9e\x75\x0b\xd2\x1b\xee\x4d\x96\x29\x62\x80\x56\x62\xef\xb1\x09\xd0\x2b\x4f\x07\x0d\xe6\xa7\x90\xe0\x4a\xd4\x33\xa6\x9e\xee\x7c\x38\x65\x7a\x13\x47\x41\x6d\x6e\x4e\x13\x03\x9c\x19\xde\xc9\xd6\xc0\xa3\x7a\xe3\x08\x6d\x9a\x37\xad\x69\x9e\x4f\x35\xa7\xd3\x9e\x8e\xda\x7e\xfd\x37\xdd\xb9\xdc\xbb\xf8\x0c\xfd\x99\x00\xf6\xf1\x9f\x23\x08\x39\x04\xfa\xd8\x43\x56\x90\x66\xfd\xc5\xdc\xc3\x60\xdf\x05\xba\x2b\x51\x0b\x12\x4b\xb6\x42\xe5\xe6\x2e\xf5\xe3\x03\xf1\xd8\xcb\xfa\x9e\xc9\x7e\x78\xfd\x2e\xf5\xe1\xe2\x1c\x58\xc4\xea\xfa\x48\x87\x73\x4c\xbd\xdc\x52\xbb\x08\xb5\xe4\x32\xec\xbb\x46\x09\x2e\x89\x73\x21\x5d\xa9\x70\xc7\x6f\x94\x49\xd7\xb3\xd3\x19\x38\xec\x20\x7f\xbd\x1e\x36\x9f\x42\xf0\x1f\xfb\x1d\xe8\xc5\xe8\x0f\xdd\x6b\x53\xd0\xe7\xa7\x9e\x9e\x37\xda\x2f\x71\xd4\xfd\xd9\xfe\x27\x00\x00\xff\xff\x4e\xec\x16\x9e\x76\x0f\x00\x00")

func templatesPartialsHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderTmpl,
		"templates/partials/header.tmpl",
	)
}

func templatesPartialsHeaderTmpl() (*asset, error) {
	bytes, err := templatesPartialsHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.tmpl", size: 3958, mode: os.FileMode(420), modTime: time.Unix(1523616070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _redirectsRedirectsCsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5c\xcd\x92\xdb\xb8\x8f\xbf\xf7\xb3\x44\x51\x92\x99\xd9\xad\xda\x6b\x6a\x0f\x73\x99\x39\xe4\x01\x52\x30\x09\x49\x88\x29\x42\xcd\x0f\x75\xbc\x4f\xbf\x45\x52\x9f\xb6\x6c\x4b\xb6\x3a\x33\xff\x4b\xda\x12\x49\xfc\x7e\x20\x09\x10\x04\xa9\xe4\x28\x58\x73\x7d\xca\x4b\xc3\xd6\x4a\xae\xd1\x3a\x12\x8d\x61\xe9\x85\x2b\x65\x93\xbf\xd6\x64\xaf\x15\xbe\xd6\xf4\xe1\xae\x80\x1a\x5d\xc5\x92\x15\x97\x84\xb7\x24\xbd\xe4\x0d\x72\xa3\xb0\xe1\xc6\x2b\x70\xc4\x1a\xb4\x14\x5c\xd7\x5e\x93\x3b\xe5\x15\x7b\x4b\xba\x4c\x7c\xc2\x03\x36\x86\x04\x5a\x07\x8e\x82\x2c\x5b\xb0\xb1\x35\x28\x05\x06\xc1\x46\x66\xab\xe4\xcd\xe9\xad\x11\xfc\x32\xa8\xac\x93\x58\x05\x42\xb0\xd7\xce\xe6\xfe\x68\x51\x38\x36\xc3\x8b\xc8\x96\xb4\xc4\x9f\x5c\x58\x34\x6d\x10\x3c\xeb\xb5\xfb\x22\xe6\x04\x2f\x65\xbd\xe4\x58\x37\x8a\x4f\x35\x6a\x07\x5a\x2a\x38\xb0\x37\x35\x98\x23\xba\xae\x07\x48\xbf\xb1\x39\xe6\xa9\xa4\xeb\x73\x6a\x43\x27\x44\x7a\x97\xef\x13\xc3\x87\xa5\xce\x19\x2f\x8a\x1f\xfb\xb0\xe4\x16\x8d\x0e\x30\x8d\x3f\x28\x12\x9d\xf6\x5a\x3a\xf8\x89\x36\x9f\xbe\x2c\x48\x83\x16\x98\x58\x2f\x14\x58\xd0\x72\x14\x27\xb1\x20\x41\x81\xbc\xc4\x83\xf3\x5a\xa2\x71\x15\xd6\x00\xd6\x19\x12\x95\x73\x06\xa1\x57\xf5\x71\x2e\x73\x5d\xf7\x23\x35\x76\x10\xe9\x62\x98\xbe\x71\x66\x92\x96\x61\xe8\xbb\x6e\x88\xfd\x8a\x66\x5a\x32\xd3\xe9\x6a\xf3\x33\xe6\xcb\x72\x5e\xf2\x43\x30\x13\xb4\x96\xb4\xf4\xd6\x99\x53\xe8\x0d\x03\x12\x73\x83\x0e\x48\xf5\xaf\x13\x9b\xf4\xce\x82\x42\x1b\x27\x6a\x64\xb2\x56\xc2\x9c\xd0\xb9\x28\x63\x69\x43\xb7\x8c\x76\x1c\x1b\x57\x0d\x3d\xd2\x29\xfe\xb8\x28\xe7\x51\x07\xd0\xdb\x00\xeb\xa7\x5c\x80\x3f\x2e\xc9\xbb\x41\xea\x00\x2a\xcc\x44\x2e\x1a\x88\xf6\xdc\xb1\xf2\xc7\x38\x0c\xb7\xb9\x5c\xb6\x3d\x27\xd3\x0b\xb9\xe3\xbf\x67\xaf\x6b\x2a\x4d\xfc\x3d\x79\x1d\x56\x84\x1a\x5c\x3f\x82\x5f\x3e\x7d\xfe\x2c\x50\x5b\x6f\x67\x9e\x18\x75\xa9\x40\x4b\xd0\xf2\x2d\x4c\x8d\x1a\x8c\xa8\x42\xd5\xfb\x0e\x7f\x03\x81\xb9\x8a\xdb\x99\xdc\x5b\xca\x10\x94\xab\x40\x4b\xcb\x82\x40\x09\x30\x98\x0b\xf0\x16\x2d\x17\x12\xc1\x55\xa9\x07\x40\x09\xae\x58\x19\x54\xe0\x50\xc6\x02\x4b\xda\x55\xe8\x8f\x2b\x96\xb7\xbb\x18\x73\x25\x6f\x83\xdd\x70\x03\x7d\xc1\xf0\xa3\x5f\x9a\x3a\x25\xb4\xf6\xa0\x86\x32\x6f\x5a\x3c\xdd\xf6\x0a\xd7\x05\x9e\x31\x5e\x96\xbc\xf3\x34\x4c\x28\x35\xc9\x13\x82\x59\xa8\xf5\x8e\xf3\x6e\x05\xf4\xea\xb5\x7f\x56\x2d\x3d\x20\xba\x53\x33\x57\x73\x04\x49\xdd\x09\x8d\xdd\x12\x0a\xdc\x00\x59\xd2\x6c\x19\x6d\x27\xdb\x69\x99\x24\x1c\x14\xd6\x6c\x1c\x28\x72\x27\xd2\x67\x06\xfb\x0e\x36\xb4\x0a\xf4\x8e\x82\x07\x32\xae\xb2\xc9\x00\xc3\x84\x01\x63\x08\x4a\xb4\x79\x7a\x95\xd4\x8b\x95\x82\xc1\x1a\xe7\x02\x60\xf0\x47\xa4\x0b\x08\x01\x46\xa8\x75\x5f\xb7\x7b\x30\x73\xcd\x56\xe0\xad\x71\x11\xd0\x05\x80\x96\xfe\x0f\xc3\x4c\x62\x91\x6c\x21\xe9\xd4\xd5\x92\x58\x73\x69\xa0\xa9\xd6\xfa\x89\x6b\x52\xcf\x54\x58\x12\x3f\x0d\x27\x5a\xb4\x2e\xae\x70\x0d\x6a\x1b\x26\x65\x44\xf2\xb6\x5f\x2e\x47\x22\x7d\xcd\xb3\x90\xe2\x86\x80\x65\x2a\x33\x49\xbb\x99\x72\x2f\xdd\x60\x49\xd6\xa1\x19\xeb\x27\x33\x3b\x18\x7c\x1f\xab\x5e\x09\xfc\x88\x81\xb3\x96\xe4\xba\x2e\x95\x64\x11\x6c\xaf\xad\x08\xd1\x89\x49\x90\xc9\xb3\x8e\x8b\xf4\x83\x16\xbe\x08\x36\x57\xf5\x0e\xea\x7b\xa8\x18\xfa\x90\x5a\x50\x03\x50\x58\xfb\x94\x42\x47\xfa\xdd\x15\xbd\x83\xbd\x39\x1e\x16\xd0\x90\x0b\xe2\x58\x1c\x03\x78\xf7\x2c\xc2\x4a\x50\x37\x4f\x07\xc8\xab\xc4\xef\xe1\x86\x45\x45\x4a\x0e\xce\x7e\xcb\xc4\xdb\xe6\x7e\x6f\xe0\xac\x76\x1b\xd3\xad\x69\x83\xc6\xb2\xd6\xa8\x3a\x35\xa8\x25\xd5\x47\x59\x73\x25\x9e\x12\x7e\xa6\xc4\x35\x94\xdd\x3c\x9f\x50\x40\x35\x68\x17\x27\xc5\xbb\xb8\xb8\x73\x84\x47\x27\x91\x60\x2d\xb0\xe9\xea\x17\x68\x1c\x85\x81\x35\x63\xd8\x39\x56\xd8\x65\x56\xdd\xc2\x3b\xd3\x70\x19\xf8\x86\x89\x5b\x70\xa8\x14\x39\x3c\xb3\xf1\x68\x6d\x68\x9c\x41\x2d\xef\xe4\xbc\x2e\x45\x5c\x90\x9a\xcb\xda\xc3\x78\xfb\x3d\x4e\xcb\xaa\x25\x5d\x0a\xc5\xd6\x19\x92\xe4\x6b\x49\x45\x41\x82\x14\xae\x8c\x13\xb7\x19\xf3\x06\xdc\x77\x50\xb3\x36\x16\x7e\x85\x5a\x53\x9c\xfd\xd4\xe8\xb6\xa7\x8e\xa5\xf1\x65\xc3\x64\x59\x93\x2e\x1f\x08\xed\x1f\xd1\x6d\x3d\xf8\xc3\x0a\x53\xcb\xa6\x4f\x70\x76\x0f\x76\x57\xed\x3a\x80\x33\xf5\x6e\x20\xdd\x08\xeb\x63\x1a\x93\xb4\x43\xa3\x43\x24\x30\xcd\x03\x62\xe0\x82\x46\xe0\xed\x10\x7e\x59\xc2\x9c\xdc\x54\xd4\xe8\x85\x50\xb7\x64\x38\xa6\x54\x27\x7e\x24\x61\x2f\x15\xb1\x06\x32\x58\x93\x8d\x81\xf9\xcc\x1b\x2d\x8b\x3a\x23\xb1\x4a\xe6\x33\xf4\x50\xa3\x29\x4f\x7b\x11\x1b\xa4\x3d\x47\x69\xf2\x3a\x66\xc0\xf7\xa3\xb7\x20\x79\x0f\x2f\x81\x3f\x05\x5a\xfb\x16\xa7\xd4\x33\x3b\xff\x6d\xee\x61\x35\xea\x96\x34\x1a\x69\xcd\xed\x64\x7b\x5c\xb0\x41\x2a\xb5\x24\x83\xc2\x8d\x3b\xc7\x42\xd2\xc6\x74\xda\x44\xf0\x5c\x8d\x9b\x08\xfb\xa4\x65\xca\x14\xf9\xb1\xb6\x0d\x0a\x0a\x8b\x5d\x4c\x22\x0c\x9d\xb6\x7f\x4e\xe6\x1e\xe2\xf2\x30\xad\x8d\x1b\xc1\x84\x25\x20\x4c\x91\xf0\x4c\xba\xac\xd8\x9b\x79\xd2\x3f\xb5\x16\x6c\x9d\x6d\xd0\x84\xf2\x4d\x91\xe9\x15\x84\xc5\x43\xc1\x45\xa8\xb5\x27\x26\xc3\x99\x02\xb5\xe0\xb0\x3b\x1d\x35\xd1\x42\xd3\x79\xe8\x23\x07\x28\x6b\x84\x6e\x39\xf7\x0d\x26\x56\x86\xb0\x55\xc6\x83\x99\x8a\x95\x4c\xb9\x05\x5a\x93\xf3\x5a\x3e\xf2\xbd\x2a\xf3\xe1\x64\xf2\xf0\xeb\x8d\x5c\xd5\x25\xd1\x47\xfe\x46\x83\x1a\x6a\x3c\x9f\x47\x5e\x04\xbb\xd4\xf0\x2a\xea\x64\x85\x88\x7f\x49\xb0\x77\x8d\x77\x71\x60\x27\x87\xba\xd3\x87\x1a\xc1\x7a\x33\xce\x9c\x28\x3e\xc5\xf4\x82\xeb\x06\x4c\x88\x8d\xec\x78\x40\x35\x9e\x29\x3f\x0e\xb5\xa8\xd2\x7d\xcc\x3b\x23\xa8\x90\x82\xf8\xe0\x2d\xd9\x1b\xb2\xf5\x82\x4a\x0d\x58\x8b\xba\x4c\x69\x10\x3c\x51\xb3\x62\xb0\x2e\xe5\xde\xe0\x7f\x06\x70\x27\xea\x9a\xb6\x4c\xaf\x2e\x29\xc7\xf7\xa4\x67\x37\x0e\xb6\x48\xbc\x41\xf6\x52\xf4\x0a\x03\x8e\x56\x25\x2a\x30\x20\x1c\x9a\xb4\xab\xcc\x2b\xae\xb1\x0f\xfe\x06\x87\x5e\xa3\x24\xf0\x16\xca\x99\x5a\xe8\x40\x84\x35\x76\xb4\xd0\x18\x38\x4a\x6a\x49\x7a\x50\x2b\x6d\xff\x21\x16\x4b\x5d\xb1\x82\xce\xea\x35\x24\xfc\xd3\x28\x10\x28\xc9\x36\xde\xe1\xc4\xd5\x8f\x09\xba\xe9\x45\x8d\xbe\xde\xe4\x2c\x6d\x57\xa8\xa5\xdb\x1b\x17\x98\xbb\xe5\x6c\x52\xcb\x22\xee\x3f\xa2\x70\x55\xbc\x4f\x76\xfa\x0a\xd0\xce\x8a\xa4\x96\xef\xa8\xc0\x00\xf0\x40\x40\x26\xc9\xc2\x21\x66\x7e\x3a\xca\x54\x20\x37\x0d\x1b\x17\xda\xd0\x6c\x4a\x3d\x23\xfc\x8c\xf7\x55\x94\x7b\xab\x6b\x4c\x24\x42\x08\xce\x06\x43\xeb\x2f\xd5\xe4\xa4\x05\xd7\xc1\xbf\xbe\x45\x2e\xbd\x42\x31\xa3\x12\x02\x20\xd0\xb2\x60\x96\x6b\x35\xda\x84\x75\xae\xdf\x55\xd0\x67\xcf\xa2\x1b\xc3\x3f\x50\x4c\x3c\x40\x0d\x26\x65\xb6\xc1\x79\xbb\x58\xef\xd9\xc3\xe8\x29\xe4\x5c\xcf\xfb\xd8\xb7\x17\x2e\x51\x81\x0e\xd1\x38\x0f\x3b\x92\x1a\x4d\x58\xf4\x42\xf0\x2d\x5e\x3d\xd9\xa9\xaf\x5b\x2e\xab\xe1\xf6\x52\xb6\x1a\xe3\x4c\xb5\xeb\x60\x8f\xdf\x7c\xa8\x59\xbb\x4a\x9d\xde\xe3\xea\xc3\x35\xd1\xbb\x39\xb3\x50\x29\xba\xca\x1f\x7c\x78\x1f\x77\x7c\x8e\xf0\x98\xa9\xcc\x22\x93\xf1\x75\xd4\xc1\xc6\xd3\x6a\x34\xf5\x72\xa5\x21\x06\x2e\xd8\x28\x16\xa0\xc0\xbb\x8a\x4d\xf4\x50\x0f\x07\xe3\x57\xf8\xcc\x55\xdf\x40\x6c\x73\x6a\xf1\x7d\xfb\x69\x73\x1e\xe5\x1f\xec\xa6\xe7\x8f\xc5\xa6\x45\xa3\xb4\xbd\x8f\xc5\xae\xa2\xfc\x87\x79\x9e\xcd\x01\xc3\xf0\x2e\x04\x08\xf8\xb3\x41\xe1\x40\x0b\xea\x95\xe0\x86\x74\x77\x36\x1d\x2a\x58\x77\x52\xf8\x4c\x7c\x72\x1d\x6e\xae\xe1\x4d\xdc\x87\xd5\x0c\x3f\xed\xc9\x3a\xec\x36\x98\xfd\x74\x3e\xa0\x41\x68\x71\xbc\x24\xd1\xf2\xb0\x61\x7b\x1e\x6a\xae\xd9\x7d\xcc\xdd\xd6\x8f\x16\x04\x68\x71\xda\xbe\x45\x59\xbd\x7e\x9c\x23\xac\x4e\x63\x74\xe6\x96\x66\xf7\xe5\x65\xf8\x59\xf9\xb4\x78\xf0\x37\x28\x7d\xba\x60\xb4\x25\xa3\x71\x1d\x75\xd9\x1b\xac\x83\x5f\x9b\xdb\x9b\x03\x3f\x7f\x59\xfc\x8a\xbc\xae\xed\x2f\x1d\x0d\xc7\x0e\xd4\x5c\xcc\x3f\x33\x2e\xcb\x44\x76\xdf\xe2\xb8\x0a\xb1\x28\x50\x38\xcb\x45\x3c\x39\x01\x2d\x0f\xa8\xb1\x20\x67\x59\x0f\x42\x52\xdb\x77\xdd\xf7\xdc\x66\xd2\x5d\x9d\x1f\xb9\xdc\xe9\x09\x54\xfd\xae\x23\xfe\x62\x03\x6a\x7a\xbd\xaa\xbf\xb1\x3e\x14\x6e\xb9\x16\x71\x4f\xf6\xf9\x8d\xf6\x65\x90\x2d\x77\x05\xeb\xd7\x3f\xc6\x4a\x87\x13\x69\xeb\x4d\xe8\xd3\x98\xa9\xd4\x84\x43\xbb\xc2\x6b\x39\x36\x7e\xf4\x42\xe1\xe3\x70\xa3\x52\xa1\x47\x66\x97\x32\xd2\x97\x5a\x64\x1b\xb6\x70\x50\x78\x36\x9c\xfd\xf7\x1e\xa9\xd1\xed\xba\x33\xb5\xb6\xe2\x9c\x7f\x15\xb2\x12\x70\xcb\x68\xf1\x9b\x46\x63\x2b\x6a\xb8\xf0\xc7\x57\xcf\x0e\xa5\xad\xc0\x5c\xf8\xc6\xd5\xe3\x71\x4b\xe0\xd3\xf7\x64\xfd\xb1\xaf\xb7\xeb\xfd\xd8\x51\xec\x95\xfa\x4f\x9e\x5f\xfa\xe3\xec\xd3\xbf\x10\x81\x69\x49\xce\x1b\x64\x6d\xd0\x22\x98\xb0\x79\x97\x12\x5b\x54\xdc\x0c\x91\xf6\x0e\xe7\x9a\x0f\x21\xbf\xcc\xbf\x6b\x6c\x41\x79\x04\x29\x51\x96\x2d\x2c\xcc\xfd\xb1\x7c\xfc\x28\x07\x9a\xc6\x30\x88\xea\xf2\x2b\xc9\xb9\xb4\x1b\x33\xfc\x8e\xd8\x97\x75\x5f\x6f\xbe\x7a\x30\x0e\x8d\x3a\x4d\xb3\x1b\xe9\xce\x67\xb0\x1f\x65\xb9\xe8\xae\x48\x82\xb5\xe8\x66\x99\xe5\x4d\x1f\x77\x3e\x0c\xf4\x92\xa7\x9f\x36\x2f\xd1\x65\xd6\x05\x31\xf2\x43\xe5\x5c\x63\xff\x27\xef\xcb\x3e\xb2\xb6\x1f\x4b\x6e\x3f\xfa\xe3\x4b\xde\x92\xf5\xa0\xc8\xa6\xb3\xdd\x3c\x4c\x00\xc1\xda\xa1\x76\xb9\xc4\xf6\xb7\xfc\xef\xbf\xbe\x7d\xff\xf6\xf7\xd7\xef\x2c\x84\x6f\x62\xa5\xef\x82\x25\xe9\xf2\xbb\x63\x56\x1f\x2b\x57\xab\x41\x3e\x6b\x2b\xa9\x0c\xb4\x3e\x96\xe4\x2a\x7f\xf8\x48\x9c\xcb\x26\x13\x81\x26\x15\x94\xe6\x7f\x16\x1a\xda\xdc\x86\x20\x02\x8c\xcc\x46\xc9\xa0\xce\xaa\xae\x41\x5f\xa7\xc2\x5f\xdf\xbe\xfd\xef\xd7\xef\x92\xac\xe0\x16\xcd\xe9\x97\x91\xbf\x8a\xfb\xe4\x2d\x8d\x33\xcb\xb4\x68\x4a\x4f\x12\x1d\x2f\xdc\x6e\xdd\xf5\x8e\xc6\x6d\xa8\x1f\x5e\x9d\xbe\x7c\xfa\xfc\xdf\x37\x07\xe5\xdb\x9f\x5f\xd3\xc0\xfe\xf9\xf5\x7b\x45\x68\x82\xdf\x38\x7d\x6f\x09\xdf\xf6\x18\x91\xce\xc1\xd1\x95\xc9\xb4\x8c\xf9\x92\x1b\x54\xdd\xbd\xed\xb4\x33\x2f\xa8\xf4\x06\x2d\xeb\xfe\xce\x5a\x77\x17\x5f\x1e\x4e\x60\x10\xb8\xf0\x41\x3f\x83\x96\x24\x6a\x81\x67\x99\x93\x2f\x9f\x3e\xff\x91\x3e\xce\xf9\xb0\xb3\xe4\x1f\x5e\xe3\x97\x4f\x9f\xff\xab\x31\xdc\x92\x8d\xf3\xee\x25\x4f\x5f\xd5\xe5\x15\xaa\x26\x77\x68\xea\x78\x59\x7b\x38\x89\xfa\xd0\x97\xa7\x3f\xce\x80\xb6\x05\x9b\xba\x4f\x3b\x97\x06\xea\x1a\x17\x1a\xce\x05\x0b\xe6\x23\xc5\xe8\x34\x5e\x43\x10\xa7\x95\x72\xbb\xda\x61\x92\xc4\xbd\xf2\x4c\xea\x4a\x19\x61\x4e\x75\x35\xd0\xba\x97\x61\x37\x22\x58\x17\x1f\xf2\xb0\x0b\x76\xde\xe6\x6f\x15\xb8\x37\x94\x9c\x63\x1b\xbf\xb0\x9c\xd6\x42\x13\x3a\xf3\x25\xd7\xb6\x7a\xfb\x30\x78\x49\xd2\x03\x58\xc1\xe6\xda\x31\xe4\x78\xe8\x39\x7f\xdf\x09\xe9\xf3\x01\xd6\x79\x79\xe2\x62\xc8\x28\xbc\xa1\x52\x07\x24\x5d\xc6\x6b\xe7\x06\x83\xd9\x9d\xd8\xeb\x32\x99\xe3\xa3\xed\x92\x0e\x95\xf9\x37\x6a\x11\xe0\x2f\x1a\xce\xe9\x4d\xda\xa6\x13\x1f\xd2\x15\xa8\xb0\xa4\x0d\x53\xfe\x25\x98\x7e\xb0\x9b\xf1\x52\xc6\xe7\xf1\x67\x36\xba\x9b\x6c\x58\x28\x33\x83\x0d\x1b\x97\x17\x78\x30\x1e\xcc\x29\x0b\x36\x92\x5b\x77\xc8\x6a\xfb\x6a\xb2\xd9\xeb\xe4\x65\xf6\x4c\xb8\x0e\x1f\x71\x8c\x2c\x27\x5b\x9e\x9e\xe3\x19\xc5\x40\x65\x37\x4d\xe3\x05\xa1\x7f\xa5\x62\xaa\xb6\x79\x1c\xf3\x2c\xf1\xca\x34\xbb\x8c\x74\x36\xe4\x5f\xb2\x6c\x4c\x56\x65\x6c\x32\x67\x80\x34\xe9\x32\xcb\x34\xa2\xb3\xd9\xe5\x98\x76\x7a\xde\x4b\x85\x69\x76\x5d\x36\xcc\xeb\xb1\xee\x44\xa7\xc9\x54\x8c\x75\x07\x4a\x63\x6d\x36\x3d\x9d\x40\xe6\x8a\x8a\x1a\xe0\x4b\x6e\x83\xb7\x91\x59\x9f\xc7\xc8\xb8\xc8\x62\xe0\xf8\x7b\xa0\xfd\x47\x9c\x8a\x5f\x52\x79\x78\x9f\x75\xef\x7b\x55\xee\x84\x87\x23\xe7\x04\xd3\xa3\x70\x11\x31\xd2\x40\xfc\xce\xc2\x39\x96\x28\x82\xe0\x91\xdd\xc1\xdb\x2c\xed\xb9\x86\x10\x3f\x1b\xf7\x60\x3d\xc1\x6c\xb2\xa0\x64\x06\xad\x57\xce\xce\x66\xd5\x7a\x8a\x97\x9f\xe5\x2d\x32\x9c\x00\x76\x78\xf3\x49\x93\x46\x34\x4b\x43\x3a\x31\x85\x1b\x33\xff\xf9\xe4\xe8\xa8\x85\x3f\xce\x04\x5c\x8e\x3c\x34\xd4\x25\xa8\xf2\x37\x3c\x4c\x1f\x2b\xae\xf1\x43\x5a\x34\xe3\x89\xd8\xc8\x3d\xb5\x9c\x52\x5e\x9b\x7a\xec\x3f\xdd\xb8\x48\x11\x6e\x4e\x3a\x2e\x4b\x22\x2d\x94\x97\x68\x41\xa9\xdf\xba\x76\xa2\xa1\x4a\x34\x04\x5a\x9a\xd9\x7f\xd7\x40\xa2\xb7\x89\x85\xa5\x77\x58\xb3\x53\xa0\x10\xcf\xb4\xc7\x95\x78\xec\x89\xf9\x4a\x9f\xa3\x2e\xa1\x24\x5d\xbe\x91\xab\x2e\x2b\x9f\x2f\xe8\x33\x31\x91\xc9\xc8\x2d\x4a\x8a\x81\xc6\xaf\x63\x77\xf1\x2a\xf1\x9d\x90\x8a\xcf\xff\x02\x42\xc3\x51\xcc\x6a\x2e\xac\x15\x69\x5c\x3c\xcd\x09\x2b\xfe\xff\x07\x00\x00\xff\xff\xaa\x54\xb7\x2c\xf8\x48\x00\x00")

func redirectsRedirectsCsvBytes() ([]byte, error) {
	return bindataRead(
		_redirectsRedirectsCsv,
		"redirects/redirects.csv",
	)
}

func redirectsRedirectsCsv() (*asset, error) {
	bytes, err := redirectsRedirectsCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "redirects/redirects.csv", size: 18680, mode: os.FileMode(420), modTime: time.Unix(1528123175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/error.tmpl": templatesErrorTmpl,
	"templates/main.tmpl": templatesMainTmpl,
	"templates/partials/footer.tmpl": templatesPartialsFooterTmpl,
	"templates/partials/header.tmpl": templatesPartialsHeaderTmpl,
	"redirects/redirects.csv": redirectsRedirectsCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"redirects": &bintree{nil, map[string]*bintree{
		"redirects.csv": &bintree{redirectsRedirectsCsv, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"error.tmpl": &bintree{templatesErrorTmpl, map[string]*bintree{}},
		"main.tmpl": &bintree{templatesMainTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.tmpl": &bintree{templatesPartialsFooterTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{templatesPartialsHeaderTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

