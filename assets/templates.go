// +build production
// Code generated by go-bindata.
// sources:
// templates/error.tmpl
// templates/main.tmpl
// templates/partials/footer.tmpl
// templates/partials/header.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesErrorTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x46\xbe\x3b\xd5\x5e\x51\x1a\x21\x01\x12\x48\x70\x5b\xc4\x71\x35\xb1\x27\xb5\x55\xc7\x63\x79\x26\xe9\x56\x4b\xfe\x1d\xa5\xb0\x2c\xad\x7a\xe2\xf4\xc6\xcf\x6f\x34\xe3\xf7\xdc\xf9\xb8\x80\x4b\x28\xb2\x37\x05\x0f\x64\x03\xa1\xa7\x0a\x92\x50\xc9\xf4\xcd\xbf\xf7\xa7\x8a\xa5\x50\xdd\xd8\xf0\x70\xa7\xe9\xe9\x49\xa3\x26\x82\x31\xcd\x12\xac\x0d\x98\x46\x6b\x07\x56\xe5\xc9\xf4\x2f\x2f\xd0\x7e\xaa\x95\x6b\xfb\x78\x11\xad\x6b\xb7\x0b\x0f\x7d\xd3\xed\x7c\x5c\xfa\xe6\x15\xef\xcc\x83\x82\x99\x92\xb5\x13\xd6\x9b\x85\x0e\x35\x7a\xbb\xa9\xee\xf1\x8e\x13\x78\x92\xa3\x72\xb1\x17\x62\x9c\x53\xb2\xa7\xe8\x35\x6c\x72\xac\x1a\x5d\xa2\xeb\xc6\x81\x9f\x61\xe0\x67\x6b\x0b\x7a\x4f\xfe\x77\x5d\xc9\x5b\x8f\xf5\x78\x7d\xb2\x56\xa8\x60\x45\x25\x6f\x13\x8d\x0a\x42\x4e\x23\x67\xf2\x66\x7b\xcd\x7f\x6f\xa9\x27\xb6\x1a\x62\xf5\x62\xfa\xe6\xcd\xb4\x8f\x24\xae\xc6\xb2\x4d\x80\x9f\x20\x38\xd2\xe7\xc7\x6f\x5f\x61\x5d\x9b\xae\xf4\x5f\x46\x38\xf3\x0c\xa2\x31\x25\xa0\xec\x78\xce\xba\xf9\x56\x79\x48\x34\x09\x94\x44\x28\x04\x1d\x42\xa8\x34\xee\xcd\x84\x31\x29\xbf\x3b\xd1\xd0\x3a\x9e\x26\xca\x2a\xef\x39\x4b\x7b\xe0\xa5\x9d\x8f\x06\x2e\x31\xee\xcd\x07\xce\x8a\x4e\xe1\xbb\x98\xde\xfd\xa9\x67\xe9\x76\xd8\xb7\xf0\x83\x00\x0b\x27\x3e\x44\x21\x18\xb9\x02\xe6\x33\xc4\xec\x38\x2f\x94\x23\x65\x47\xa0\x21\x0a\x4c\x78\x86\x80\x0b\x81\xc3\x59\xc8\xb7\xdd\xae\xfc\xcd\xfc\x16\xde\x22\xb9\xfe\x13\xaf\xf8\x2b\x00\x00\xff\xff\x38\x7a\x05\x98\xac\x02\x00\x00")

func templatesErrorTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorTmpl,
		"templates/error.tmpl",
	)
}

func templatesErrorTmpl() (*asset, error) {
	bytes, err := templatesErrorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.tmpl", size: 684, mode: os.FileMode(420), modTime: time.Unix(1485253123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x7f\x6f\xdb\x38\x12\xfd\x7b\xf3\x29\x66\xb5\xc0\xc9\x6e\x44\xc9\xda\x5c\x7c\x4e\x6c\x05\x48\xb7\xc1\x5e\x80\xb6\x09\xae\x29\xee\x0e\x41\x80\xd2\xd2\x48\x62\x4b\x91\x2a\x39\xb2\x6b\x38\xfa\xee\x07\xca\x3f\xe2\xa4\x69\x2e\x8b\xa0\xff\x88\xa2\x66\xe6\xbd\x37\xc3\x21\x4d\x4f\x7e\x7d\x73\xf1\xc7\xd5\x7f\x2f\xcf\xa0\xa4\x4a\x9e\xec\x4d\x36\x03\xf2\xec\x64\x0f\x00\x60\x42\x82\x24\x9e\x9c\x2b\x42\xa3\xb8\x04\x8b\x66\x86\x06\xd0\x18\x6d\x80\xc1\x45\x9e\x8b\x14\x21\xd7\x06\xde\x73\x12\xda\xb9\x7c\x20\x4e\xc2\x92\x48\xed\x24\x5a\x45\xaf\x90\x2a\x24\x0e\x25\x51\xcd\xf0\x6b\x23\x66\x89\xf7\x1f\xf6\xf1\x94\xfd\xa1\xab\x9a\x93\x98\x4a\xf4\x20\xd5\x8a\x50\x51\xe2\x9d\x9f\x25\x98\x15\x18\xa4\xa5\xd1\x15\x26\xb1\x07\xd1\x2e\x48\x5a\x72\x63\x91\x12\xaf\xa1\x9c\x8d\xbc\xfb\xb6\x0d\xc6\x5c\x64\x54\x26\x19\xce\x44\x8a\xac\x9b\x04\x42\x09\x12\x5c\x32\x9b\x72\x89\x49\x1c\x0e\x82\xc6\xa2\xe9\xa6\x7c\x2a\x3b\x1e\xc5\x2b\x4c\xbc\x99\xc0\x79\xad\x0d\x79\xbb\xc8\x2b\x53\xae\x4d\xc5\x89\x65\x48\x98\xba\x84\x77\x54\x13\x4a\xac\x4b\xad\x30\x51\xfa\x91\x48\x2a\xb1\x42\x96\x6a\xa9\xcd\x4e\xd0\x6f\x87\xa3\xc3\xa3\xc3\xd7\x8f\xf8\xf3\xba\x96\xc8\x2a\x3d\x15\x12\xd9\x1c\xa7\x8c\xd7\x35\xb3\xc4\xa9\xb1\x6c\xca\x0d\xb3\xb4\xb8\x57\xb4\x07\x48\x52\xa8\x2f\x60\x50\x26\x9e\x2d\xb5\xa1\xb4\x21\x10\xa9\xd3\x5b\x1a\xcc\x13\xcf\x2d\x84\x3d\x8e\xa2\x34\x53\xa1\x56\x36\x2c\xf4\x2c\x6c\xbe\x44\xa2\xe2\x05\xda\x28\xe7\x33\xe7\x1c\x8a\x54\x7b\x40\x8b\x1a\x13\xaf\xb3\x44\xdf\x58\x07\x72\xb2\xb7\xf7\xcb\x2f\xcb\xe5\xa7\xc9\xaf\x8c\x5d\x8b\x1c\x24\x21\x9c\x9f\xc1\xe8\xe6\xe4\x13\xdc\x82\xe5\x39\xfe\xf3\xea\xdd\xdb\xb6\xed\xa4\xdc\x17\xe3\x54\xdb\x12\x91\x36\x4a\x96\xcb\xf0\x92\x93\xeb\xaf\xb7\x62\x6a\xb8\x59\x9c\x5a\x8b\x64\x2f\x39\x95\x6d\x1b\xa5\xd6\x46\x5a\x66\x4c\x60\x98\x5a\xeb\x9d\x6c\x78\xaf\x51\x65\x22\xbf\x61\xec\x31\xc6\x1d\x65\xe7\x67\x70\xf4\x73\x54\x09\x64\x47\x6b\x4d\x5b\xce\x1f\xaa\xba\x57\xad\x82\xd6\xb2\xdc\x87\x9f\xa2\xad\xe2\x42\x3d\xd4\xc6\xd8\x13\xfa\x26\xd1\x6a\xcf\x4f\xa6\x3a\x5b\x40\x2a\xb9\xb5\x8e\x07\xc2\xab\x45\x8d\xd0\xb6\x6e\xc5\x57\x48\x40\x58\xd5\x92\x13\x82\x57\x73\xe3\xf6\x93\xed\x62\xd1\x78\x10\x42\xdb\xee\xad\x1b\x99\x0b\x05\x22\x4b\x3c\xf7\xe2\x81\xd1\x12\x37\xef\xc4\xa7\x42\x65\xf8\x2d\xf1\x58\xbc\x16\xb8\x82\x5e\x08\x94\xd9\xba\x04\x93\x2e\x87\x27\x59\x73\xad\xc9\xb1\x6e\x39\x6d\x6a\x44\x4d\x1b\xc4\x5e\xde\xa8\x6e\x8b\xf6\x44\x60\x03\x1d\x14\x81\x09\x78\x50\xf5\x97\xe2\xda\xff\x53\xeb\x42\xe2\xa9\xe2\x72\xe1\x0e\xaa\x8b\xe9\x67\x4c\xc9\xbf\x49\xcc\x58\x5c\x9b\x9b\xc4\x3d\x6e\x6f\xb7\xf1\xfd\xe5\x06\xd2\x19\xc2\xaf\xc9\x6a\xb8\xbd\xbd\xbe\xe9\x87\x75\x63\xcb\x1e\x37\x45\x53\xa1\x22\xdb\x6f\x83\xce\x28\x93\xf8\x95\xc2\x39\xbc\xe1\x84\xbd\xfe\x98\x27\x36\x4c\x0d\x72\xc2\x33\x89\xce\xb1\xa7\xfb\xc1\x1a\xb4\x4a\x6c\x58\x20\xad\x0d\xf6\xf5\xe2\x8a\x17\xef\x79\x85\x3d\xdd\xbf\x1e\xdc\x8c\x79\xc8\xed\x42\xa5\x49\x3c\xe6\xa1\x35\x69\x52\x8c\xab\xb0\xe6\x06\x15\xbd\xd7\x19\x86\x42\x59\x34\xf4\x1a\x73\x6d\xb0\xe7\xd2\x5b\xa3\xb6\xfd\xde\x5c\xa8\x4c\xcf\x83\x4c\xa7\x9d\xb6\xc0\x5f\xd5\xc7\x0f\xfc\x28\x9a\xcf\xe7\x61\xd1\x15\x81\xf1\x4d\x15\xc2\x54\x57\xd1\xdd\xec\xb3\xf5\x03\xbf\xe0\x7e\x7f\xbc\x86\x2c\x78\xcf\x5f\x25\xe1\x07\xe0\x7f\x3c\x65\x87\xc3\xd1\xd1\xef\x83\x83\x7f\xb0\x03\x3f\x80\xa5\xcf\xa5\xd4\xf3\x53\x95\x96\xda\xf8\xc7\x40\xa6\xc1\xf6\x5e\xac\x45\x95\xb9\xc8\x9a\x17\xe8\x4e\xd8\x2e\xc8\x4d\xfc\x63\x90\x3a\xed\x7e\x3f\xc2\x9a\x53\xe9\xce\x3f\xd8\x87\x02\xe9\x03\x72\x93\x96\xbd\x3e\xec\xdf\x79\x94\xdc\x96\x77\xc0\x9b\x45\xda\xf5\x5e\x6e\x7b\xca\xb5\x4e\xf4\x0a\xae\x2e\xde\x5c\x00\x83\x7f\x97\xa8\xc0\x76\x4e\x20\x2c\x54\x7a\x86\x19\x90\x06\x83\x2a\x43\x83\x06\xe6\xe8\x4b\x09\x0a\x57\x9f\x79\x96\x6d\xbc\x09\x4d\x05\x42\x91\x06\xa7\x17\xfe\x3c\x05\x83\xb6\xd6\xca\xe2\x0e\x55\x14\x81\xc8\x7b\xdf\x67\x92\x24\x09\xf8\xd1\x0a\xc9\xbf\x27\x2e\x8a\xba\x61\xc6\x0d\xa8\xa6\x9a\xa2\xb9\xc8\xff\x85\xb6\x91\x64\x21\x81\xe5\xf2\x37\x91\x3b\x9e\x46\x52\xf8\xc0\xdc\xb6\xb0\x5c\x3e\x61\x42\x69\xb1\x6d\x61\xe0\xd2\x17\x79\xdb\x8e\xbf\x27\x35\x48\x8d\x51\x77\x65\x5d\x67\xba\x0f\xfe\xdf\x1e\x20\x26\x3e\xec\x3f\xd4\xf7\x00\xb0\x05\xc7\x08\x8f\xe4\xf6\x38\xcd\x77\xe1\xaf\xa2\xed\xd1\x77\x17\xb5\x69\xe5\xbd\xbd\xad\xe7\x3b\xe4\xb6\x31\x08\x24\x2a\x04\xad\x56\xcb\xc1\x20\x35\x98\x09\x72\x8b\xe6\x7e\xd7\x8e\xa3\xa8\x44\x59\x87\xdb\x5e\x76\x97\x89\xae\xbb\x57\x2d\xbf\xfd\x1e\x55\x1d\x9c\x50\x05\x73\x80\x4c\x2b\x36\xd5\x8d\x4a\x91\x39\xdc\xe8\x61\x8b\x39\x1f\x13\xc7\xbd\xfe\x72\xb7\x9d\x71\x86\x8a\xdc\xcb\x95\xa8\xf0\x42\x5d\xba\x86\x0e\xc0\x8f\xbb\x47\xcc\x0e\x06\x60\x31\xd5\x2a\xb3\xae\xdf\xc1\x57\x5a\x75\xb7\x29\xde\x61\xfa\xc7\x10\x43\xdb\x1f\xb7\x8f\x72\x1d\x3c\x93\xeb\x77\xf7\x38\x88\xd9\xf0\x05\x5c\xc3\x67\x72\xb9\xbd\xee\x0f\x63\x16\x8f\x5e\x40\x16\x8f\x9e\xc9\xf6\xf7\xae\x8a\x23\x97\xda\x4b\x72\x1b\x3c\x93\xee\xb0\x4b\x6e\xd0\x65\xf7\xa2\xf4\x9e\x4b\x38\x5c\xe5\x37\x88\xf7\xff\x0a\xdb\x33\x80\x07\xdd\x83\xc5\xcf\xca\x62\x0d\x6b\x91\x1c\x88\x6e\xa8\xb7\x6e\xf5\x20\x8e\x07\x83\xc1\x0f\x1d\x0e\xe2\xe0\xe0\x49\x87\x61\x1c\x0c\x9f\x74\x88\x47\x71\x10\x8f\x9e\xc6\x18\xc4\xc1\x70\xf0\x7f\x50\x06\x0e\x66\xd7\x69\x12\x6d\x6e\x03\x93\xc8\xdd\x69\xdc\xb8\xfa\x77\xf3\xbf\x00\x00\x00\xff\xff\x26\xc7\xbb\x8e\xf5\x0c\x00\x00")

func templatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainTmpl,
		"templates/main.tmpl",
	)
}

func templatesMainTmpl() (*asset, error) {
	bytes, err := templatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.tmpl", size: 3317, mode: os.FileMode(420), modTime: time.Unix(1485254206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xc1\x6e\xe3\x36\x10\xbd\xfb\x2b\x08\x9e\x2b\x73\xb1\x01\x7a\x28\x14\x01\x41\xd0\x6c\x17\x0d\xe2\x43\xb6\xe8\xd1\x18\x93\x23\x69\x6a\x6a\x28\x90\x23\x29\xee\xd7\x17\xb4\xe2\x38\xad\xbd\xe8\xc6\xd9\xf6\x62\xcb\x33\x7c\x6f\x9e\xf9\x86\x43\x95\x75\x08\x82\x51\x59\x0f\x29\x5d\xeb\x3e\x12\x4b\x51\xb4\xe4\x50\x57\x8b\xb2\xfd\x78\x48\x8c\x94\x06\xf0\x7e\xd7\x92\x73\xc8\xba\xba\x9b\x61\x9e\x78\x9b\x4a\xd3\x7e\xac\x16\xa5\xa3\xf1\xb0\x7a\x26\xd5\x7f\x0f\x4e\x11\xfa\x7e\x8e\x32\x8c\xe7\x00\x05\xc3\xa8\x6c\xf0\x45\x5e\xfa\x0f\xb4\x0d\x7e\x9f\x2a\x7c\x53\x04\xc6\x42\x5a\x8a\x6e\x8e\x74\xee\x18\xd9\xab\xbe\x3a\xa5\x5d\xaf\x5b\x04\x47\xdc\xe8\xea\x17\xf4\x7d\x69\xda\xab\x6a\x51\x0e\xfe\xdc\x4a\x4f\x49\x32\x8f\xa7\x73\x59\x12\xec\x72\x16\x54\x1b\xb1\xbe\xd6\xa6\x45\xdf\x1b\xb0\x16\x53\xa2\x0d\x79\x92\x9d\xae\x6e\x5e\xff\x2c\x0d\x54\x8b\xd2\x78\x7a\x23\xa7\x0d\x61\x4b\x98\x80\x5d\x1f\x69\x04\xbb\xd3\xd5\xed\x1c\x52\xc0\x4e\x3d\x07\x2f\x65\x17\x8c\x5d\xe6\xb6\x81\x1d\x09\x05\x4e\xba\xfa\x92\x63\x7b\xf2\x63\xf4\x35\xbf\x19\x7c\xfe\x74\x34\xfe\x57\xe6\xdc\x6c\xc2\x20\x6a\xf5\xf0\xf8\x3d\x1d\x82\x4c\x3a\x24\x33\xb5\x20\x13\xba\xa0\xab\xdf\x5b\x10\x35\xa1\x72\xe1\x82\xed\x3b\xd0\x59\x88\x88\x31\xe9\xea\x76\x7e\x78\x0f\x55\x60\x01\x2b\x43\x26\x9b\x1f\xd5\x70\x09\x1f\xe3\x94\x74\xf5\x80\xd3\x7b\xc4\x48\x04\x4e\x3d\x44\x64\xbb\x03\x76\x4d\x18\x31\x32\xb0\x45\x53\x47\x44\x17\xba\x50\x13\xd7\x21\x76\x90\x1b\xa4\x0e\xa4\xab\xbb\x39\xa1\x42\xad\x3e\x1f\x53\xff\x6f\xeb\xdc\x06\x66\xb4\xa2\x26\x92\x76\xbf\x7b\xdf\xad\x81\x5a\x91\x3e\xfd\x64\x8c\x4c\x24\x82\x71\x69\x43\x67\x56\x0f\x8f\xfa\x80\x25\x1b\xf8\x79\x68\x2a\x81\xd8\xa0\x5c\xeb\xf5\xc6\x03\x6f\x75\xf5\x65\xc6\xbc\xdd\x8e\x43\xd1\x69\x9a\x96\x35\x58\xdc\x84\xb0\x7d\x53\xe5\xbb\x67\xd0\xfb\x4a\xe7\x09\x8f\x8e\x78\x5f\xda\x86\xae\x07\xde\x99\x50\xd7\x64\xb1\xa8\x43\x26\xc8\x4e\x83\x2f\x92\x80\x50\x12\xb2\xe9\x9b\xd4\xdd\xef\x79\x3f\xf3\xe5\xea\xfa\x61\xe3\xc9\x2e\x9b\x30\x3a\xf4\x34\x62\xdc\xed\x35\x82\xb5\x61\x60\x49\xe6\xb7\x5f\x57\x0f\x8f\x26\x0d\x9b\x64\x23\x6d\x30\xa6\x7c\x3a\xbe\x49\xdb\xcf\x1d\x90\x57\xe0\x31\xca\xd7\xc7\xdf\xe1\x6b\xbe\xcb\x4e\x1b\xfb\xd5\x75\x77\x7a\xd1\x79\xb2\xc8\x69\x7f\xc7\x52\xd7\x9c\x4f\xae\xd7\xd4\x35\x5a\x81\x97\x6b\xbd\xfa\x74\xaf\xd5\x44\x4e\xda\x6b\xfd\xe3\x07\xad\x52\xb4\xc7\x8d\xb0\x8e\x97\x81\x53\xde\x89\xe5\xb0\x35\xd4\x41\x83\xc9\x84\xc6\x2f\xfb\x7c\x2e\x16\x65\xff\xb5\x02\x82\x4f\xa2\x3a\x88\x0d\x71\xe1\xb1\x96\x22\x75\x45\xf1\x41\x57\x8b\x1b\x9f\x4f\x25\x0b\xb2\x28\x4a\x0a\x46\x20\x0f\x1b\x8f\x6a\x60\x87\x51\x49\x8b\xaa\x84\x73\x5b\x79\xb4\xe8\xb9\x7f\x0e\xfd\x01\xd1\xb6\x34\xe2\x8b\x4a\x17\xac\x09\x3d\x72\x31\x8f\x97\x0e\x59\x66\x5d\x16\xcd\x88\x31\x51\x60\x73\x65\x4e\xbd\x59\xf5\xc8\xea\xd3\x0b\x46\xdd\xcf\x18\x35\x5e\x2d\x3f\x64\xaf\x54\x99\x7a\xe0\xd7\xd2\xd4\x5e\x1f\x3e\x49\x9e\x62\x79\xd0\x50\xd3\xe6\x7f\x0a\xde\xeb\xaa\x34\x79\x79\xf5\x83\xc2\x27\x8b\xbd\xa8\xa9\xc5\x88\x2a\x48\x8b\x71\xa2\x84\x2a\x77\x35\xba\x45\x69\xfa\x53\xe7\x8f\x96\x93\xcb\x6f\x48\x38\xf5\x21\x66\xe6\x97\x26\xfb\x23\x15\xc7\x30\xfd\x89\xb9\x5e\x46\x9d\x82\x3a\x77\x01\xc8\x37\xff\x0e\x32\xb3\xe7\xd5\xe2\xaf\x00\x00\x00\xff\xff\x5e\x14\x22\xae\xea\x09\x00\x00")

func templatesPartialsFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterTmpl,
		"templates/partials/footer.tmpl",
	)
}

func templatesPartialsFooterTmpl() (*asset, error) {
	bytes, err := templatesPartialsFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.tmpl", size: 2538, mode: os.FileMode(420), modTime: time.Unix(1485254138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\xcd\x8e\xdb\x36\x10\xbe\xe7\x29\x06\xec\x25\x3d\xd0\xea\xad\x68\x20\x09\x68\xb7\x01\x1a\xa0\x4d\x8b\x5d\xe4\xd0\xd3\x62\x56\x1c\x53\xac\x29\x52\x25\x29\xef\x1a\x86\xde\xbd\xa0\xf5\x1b\x5b\xf2\xee\xa2\x39\x24\x3e\x89\xc3\xf9\xf9\xf8\xcd\x70\x38\x4e\x4b\x42\x41\x2e\x7f\x03\x00\x90\x22\x14\x1a\xbd\xcf\x98\xdf\xa9\x5a\x2b\xb3\x63\x50\x3a\xda\x66\xec\xbb\x0a\x95\x61\x10\xf0\x41\x19\x41\x4f\x19\xfb\x81\xe5\x77\x3b\x55\x43\xb0\x10\xb7\xa0\xb0\x26\x90\x09\x69\x82\xbd\x2b\xa1\xf6\xa0\x44\xc6\x6a\x94\xf4\x17\x86\x92\x0d\xae\x4b\x25\x88\xe5\xc7\xe3\xe6\xd3\xed\x87\xb6\x4d\x13\xa1\xf6\xf9\x9b\xc9\xa6\xd7\x7a\x74\x58\xd7\xe4\x58\xe7\xed\x7c\xb7\x03\x0d\x85\xd5\x3c\x2a\xce\xb4\xce\x35\x0b\xab\x4f\x6a\x5c\x4b\x6e\x0d\xf1\x50\x2a\x27\x3a\x49\x25\x26\xc9\x99\x87\x9e\x8c\x88\x5f\x5b\x69\xf9\x9c\x8a\x64\x41\xf7\xa4\xaf\x2a\x39\x44\x8d\x46\x0c\xbc\x2b\x32\x56\x86\x50\xfb\x77\x49\x52\x08\xb3\xb1\xc6\x6f\xa4\xdd\x6f\x9a\x5d\x82\xde\x53\xf0\x89\xaa\x50\x92\x4f\xac\xf1\x3c\xda\x6c\xfc\x5e\x32\x40\x1d\x32\xf6\xe7\x76\xab\x0a\x82\xad\x75\xf0\x11\x83\xb2\x06\x35\xdc\x05\x0c\xca\x07\x55\xf8\x25\xbc\x03\xf5\x93\xe0\x44\xed\x4b\x98\x09\x8f\xb6\xe3\xc1\x8f\xd4\xcc\x44\x31\x63\x9c\xfb\x0a\x6a\xa7\x4c\xe0\xbc\xcb\xe0\x25\x00\xa1\x3b\xc6\xd0\xc8\x06\x25\x8d\x19\x1f\x05\x2b\xc4\x89\x70\xae\x79\x7f\x1f\x54\xd0\xc4\xf2\x9b\x12\x8d\x24\x18\xe4\xef\xd2\x44\x84\x35\x2f\xe2\xd2\x8b\x0a\x54\xad\x44\x8d\xbf\xe3\x51\x6d\x81\xfe\x85\xcd\xef\xbd\x05\x30\x32\xac\x6d\xa7\x7b\x30\xb9\x8a\x25\x00\xaa\xb0\xa6\x3f\xff\x50\x0d\x49\x71\xd8\x1c\x8f\x9b\x3b\x15\xe8\x57\x1b\xaf\x42\xdb\x0e\xb5\xcd\xf2\x9b\x43\xe5\x90\x24\xbc\xbd\xf9\xfb\xfb\x98\x9f\xe3\x91\x8c\x68\xdb\xd7\x00\x2a\x0e\xaf\x05\xb4\x8a\xe6\xbd\x91\x5a\xf9\x12\xde\xbe\xff\xf8\x2c\x9a\x34\x11\x62\xa9\xc6\x84\x7e\x55\x91\x79\x2a\xac\x11\xe8\x0e\xdc\xe0\x1e\x5e\x5e\x72\xcf\x54\x5a\xd3\x55\x9a\xc1\x3d\x1f\x23\xb0\xc5\x98\x91\x27\x1f\xe0\x1f\x1f\x17\xbc\xd0\xd6\x50\x27\x5a\x2b\x46\xad\x56\xfc\x3c\x53\x4b\xb3\xde\x79\x1e\xdf\xec\xe0\x02\xc0\xac\x9f\x38\xd2\x84\x9e\x0a\xd4\x14\xcd\x58\x7e\xdb\x09\x60\x90\x5c\xdc\xec\x89\x7c\xad\xbe\x9a\x63\x54\x14\x4a\x2b\xac\xb6\xf2\xc0\xf2\x3f\xa6\xc5\xb7\x81\xde\xd0\xa3\x8f\xb0\x85\xc2\x6f\x03\x30\x3e\xd8\x26\x34\x9e\xe5\x3f\xc7\x8f\xaf\x07\xf3\xd4\x91\x16\xd1\x07\x74\x92\x42\xc6\xee\x1f\x34\xc6\xb5\x23\x9d\x31\x63\x6d\x4d\x86\x1c\x18\xeb\x68\x4b\xce\x91\x1b\xce\x39\x3c\x9f\x0f\xda\xca\xf9\xfb\xc9\xf2\x5f\xb4\x95\xaf\x3c\x76\x9a\x34\xd7\xdb\xd7\x6c\x39\xff\x9c\x35\xb4\xda\xa9\x6a\x68\x67\xcb\x4d\x2a\x35\x78\xde\x10\x1b\x3d\x98\x47\x3e\x78\x9c\x95\x9c\xd5\x8b\x8f\xf8\x94\x94\xcf\x54\xaf\x26\x25\xc5\x61\x4a\x8b\x36\x3d\x42\x76\xea\x90\x15\x99\x86\x07\x2b\xa5\x26\x06\xe8\x14\x8e\x1e\xbb\x00\xa3\xf2\x72\xd0\x68\x7e\xad\x12\x7c\x8d\x66\xc5\x34\xd0\x53\x88\x17\xca\x34\x69\x12\xd5\xd6\xf2\xb4\x90\xc0\x95\xe4\x5d\xa5\x06\x5e\xc4\x8d\x27\x74\x45\xd9\x51\xd3\x7d\x5f\x23\x67\xd0\x5e\x8e\xda\xef\xfe\x1f\x76\xee\x4e\x2e\xbe\x00\x3f\x0b\x85\x7d\x39\x4b\x43\xc4\x10\x67\x82\x53\xc9\x0a\x32\x6c\x7c\x44\xc7\x32\x38\xb1\x40\x4f\x35\x1a\x41\x22\x63\x5b\xd4\x7e\xed\x01\xbe\xbc\x10\x2f\x7d\x58\x3f\x33\x39\x25\x6f\x9c\x7b\x3e\xdd\x7e\x00\x96\xb0\xb6\xbd\xd0\xe1\x1c\x8b\xa0\xf6\xd4\x0f\x2d\x7d\x73\x99\x66\x53\xab\x05\x57\xc4\xb9\x50\xbe\xd6\x78\xe0\x0f\xda\x16\xbb\xd5\xec\x4c\x3d\xec\x0c\xbf\xd9\x4d\x53\x4a\x25\xf8\x8f\xe3\xbc\xf2\xd3\x6c\xfe\xff\xcd\x56\xf4\xe5\x5b\xcf\xd8\x37\xfa\x9d\x34\x19\xfe\x9b\xfd\x17\x00\x00\xff\xff\x6b\x9d\xbb\x59\xa5\x0d\x00\x00")

func templatesPartialsHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderTmpl,
		"templates/partials/header.tmpl",
	)
}

func templatesPartialsHeaderTmpl() (*asset, error) {
	bytes, err := templatesPartialsHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.tmpl", size: 3493, mode: os.FileMode(420), modTime: time.Unix(1485253123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/error.tmpl": templatesErrorTmpl,
	"templates/main.tmpl": templatesMainTmpl,
	"templates/partials/footer.tmpl": templatesPartialsFooterTmpl,
	"templates/partials/header.tmpl": templatesPartialsHeaderTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"error.tmpl": &bintree{templatesErrorTmpl, map[string]*bintree{}},
		"main.tmpl": &bintree{templatesMainTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.tmpl": &bintree{templatesPartialsFooterTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{templatesPartialsHeaderTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

