// +build production
// Code generated by go-bindata.
// sources:
// templates/error.tmpl
// templates/main.tmpl
// templates/partials/footer.tmpl
// templates/partials/header.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesErrorTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x46\xbe\x3b\xd5\x5e\x51\x1a\x21\x01\x12\x48\x70\x5b\xc4\x71\x35\xb1\x27\xb5\x55\xc7\x63\x79\x26\xe9\x56\x4b\xfe\x1d\xa5\xb0\x2c\xad\x7a\xe2\xf4\xc6\xcf\x6f\x34\xe3\xf7\xdc\xf9\xb8\x80\x4b\x28\xb2\x37\x05\x0f\x64\x03\xa1\xa7\x0a\x92\x50\xc9\xf4\xcd\xbf\xf7\xa7\x8a\xa5\x50\xdd\xd8\xf0\x70\xa7\xe9\xe9\x49\xa3\x26\x82\x31\xcd\x12\xac\x0d\x98\x46\x6b\x07\x56\xe5\xc9\xf4\x2f\x2f\xd0\x7e\xaa\x95\x6b\xfb\x78\x11\xad\x6b\xb7\x0b\x0f\x7d\xd3\xed\x7c\x5c\xfa\xe6\x15\xef\xcc\x83\x82\x99\x92\xb5\x13\xd6\x9b\x85\x0e\x35\x7a\xbb\xa9\xee\xf1\x8e\x13\x78\x92\xa3\x72\xb1\x17\x62\x9c\x53\xb2\xa7\xe8\x35\x6c\x72\xac\x1a\x5d\xa2\xeb\xc6\x81\x9f\x61\xe0\x67\x6b\x0b\x7a\x4f\xfe\x77\x5d\xc9\x5b\x8f\xf5\x78\x7d\xb2\x56\xa8\x60\x45\x25\x6f\x13\x8d\x0a\x42\x4e\x23\x67\xf2\x66\x7b\xcd\x7f\x6f\xa9\x27\xb6\x1a\x62\xf5\x62\xfa\xe6\xcd\xb4\x8f\x24\xae\xc6\xb2\x4d\x80\x9f\x20\x38\xd2\xe7\xc7\x6f\x5f\x61\x5d\x9b\xae\xf4\x5f\x46\x38\xf3\x0c\xa2\x31\x25\xa0\xec\x78\xce\xba\xf9\x56\x79\x48\x34\x09\x94\x44\x28\x04\x1d\x42\xa8\x34\xee\xcd\x84\x31\x29\xbf\x3b\xd1\xd0\x3a\x9e\x26\xca\x2a\xef\x39\x4b\x7b\xe0\xa5\x9d\x8f\x06\x2e\x31\xee\xcd\x07\xce\x8a\x4e\xe1\xbb\x98\xde\xfd\xa9\x67\xe9\x76\xd8\xb7\xf0\x83\x00\x0b\x27\x3e\x44\x21\x18\xb9\x02\xe6\x33\xc4\xec\x38\x2f\x94\x23\x65\x47\xa0\x21\x0a\x4c\x78\x86\x80\x0b\x81\xc3\x59\xc8\xb7\xdd\xae\xfc\xcd\xfc\x16\xde\x22\xb9\xfe\x13\xaf\xf8\x2b\x00\x00\xff\xff\x38\x7a\x05\x98\xac\x02\x00\x00")

func templatesErrorTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorTmpl,
		"templates/error.tmpl",
	)
}

func templatesErrorTmpl() (*asset, error) {
	bytes, err := templatesErrorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.tmpl", size: 684, mode: os.FileMode(420), modTime: time.Unix(1484907130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x6f\x4f\xdb\x4c\x12\x7f\x5d\x3e\xc5\xd4\x95\xce\x49\xf1\xda\x71\x39\x72\x81\xc4\x48\xb4\x45\x3d\xa4\xb6\xa0\x2b\xd5\xdd\x09\x21\x75\x63\x8f\xe3\xed\xad\x77\xdd\xdd\x31\xb9\x28\xf8\xbb\x3f\x5a\x3b\x09\x81\x52\x1e\x1e\xa1\xbe\xf1\x7a\xbd\x33\xbf\x3f\xb3\xe3\x8d\x33\x79\xf9\xfe\xec\xdd\xc5\x7f\xcf\x4f\xa0\xa0\x52\x1e\xed\x4c\xd6\x03\xf2\xec\x68\x07\x00\x60\x42\x82\x24\x1e\x9d\x2a\x42\xa3\xb8\x04\x8b\xe6\x1a\x0d\xa0\x31\xda\x00\x83\xb3\x3c\x17\x29\x42\xae\x0d\x7c\xe6\x24\xb4\x0b\xf9\x42\x9c\x84\x25\x91\xda\x49\xd4\x65\x77\x48\x25\x12\x87\x82\xa8\x62\xf8\xa3\x16\xd7\x89\xf7\x1f\xf6\xf5\x98\xbd\xd3\x65\xc5\x49\x4c\x25\x7a\x90\x6a\x45\xa8\x28\xf1\x4e\x4f\x12\xcc\x66\x18\xa4\x85\xd1\x25\x26\xb1\x07\xd1\x36\x48\x5a\x70\x63\x91\x12\xaf\xa6\x9c\x8d\xbc\xbb\x6b\x6b\x8c\xb9\xc8\xa8\x48\x32\xbc\x16\x29\xb2\x76\x12\x08\x25\x48\x70\xc9\x6c\xca\x25\x26\x71\x38\x08\x6a\x8b\xa6\x9d\xf2\xa9\x6c\x79\x14\x2f\x31\xf1\xae\x05\xce\x2b\x6d\xc8\xdb\x46\xee\x96\x72\x6d\x4a\x4e\x2c\x43\xc2\xd4\x19\xde\x52\x4d\x28\xb1\x2a\xb4\xc2\x44\xe9\x07\x32\xa9\xc0\x12\x59\xaa\xa5\x36\x5b\x49\xaf\xf6\x47\xfb\x07\xfb\x6f\x1f\x88\xe7\x55\x25\x91\x95\x7a\x2a\x24\xb2\x39\x4e\x19\xaf\x2a\x66\x89\x53\x6d\xd9\x94\x1b\x66\x69\x71\xa7\x68\xb7\x48\x3b\x2f\x5e\x2c\x97\xdf\x26\x2f\x19\xbb\x14\x39\x48\x42\x38\x3d\x81\xd1\xd5\xd1\x37\xb8\x01\xcb\x73\xfc\xe7\xc5\xa7\x8f\x4d\xd3\x12\x02\x4c\xa4\x50\xff\x03\x83\x32\xf1\x5a\x44\x5b\x20\x92\x07\x85\xc1\x3c\xf1\x96\xcb\xf0\x9c\x93\xdb\xfb\x8f\x62\x6a\xb8\x59\x1c\x5b\x8b\x64\xcf\x39\x15\x4d\x13\xa5\xd6\x46\x5a\x66\x4c\x60\x98\x5a\xeb\x1d\xad\x79\x2f\x51\x65\x22\xbf\x62\xec\x21\xc6\x2d\x65\xa7\x27\x70\xf0\x7b\x54\x09\x64\x07\x2b\x4d\x1b\xce\x5f\xaa\xba\x53\xad\x19\xad\x64\xb9\x07\xbf\x45\x5b\xc9\x85\xba\xaf\x8d\xb1\x47\xf4\x4d\xa2\xee\x7d\x9c\x4c\x75\xb6\x80\x54\x72\x6b\x1d\x0f\x84\x17\x8b\x0a\xa1\x69\xdc\x8e\x77\x48\x40\x58\x56\x92\x13\x82\x57\x71\xe3\x7a\xdd\xb6\xb9\x68\x3c\x08\xa1\x69\x76\x56\x4d\xc6\x85\x02\x91\x25\x9e\xbb\xf1\xc0\x68\x89\xeb\x7b\xe2\x53\xa1\x32\xfc\x7f\xe2\xb1\x78\x25\xb0\x83\x5e\x08\x94\xd9\xaa\x04\x93\xd6\xc3\xa3\xac\xb9\xd6\xe4\x58\x37\x9c\x36\x35\xa2\xa2\x35\x62\x2f\xaf\x55\xfb\xfa\xf4\x44\x60\x03\x1d\xcc\x02\x13\xf0\xa0\xec\x2f\xc5\xa5\xff\x41\xeb\x99\xc4\x63\xc5\xe5\xc2\x1d\x22\x67\xd3\xef\x98\x92\x7f\x95\x98\xb1\xb8\x34\x57\x89\xbb\xdc\xdc\x6c\xf2\xfb\xcb\x35\xa4\x5b\x08\x7f\x24\xdd\x70\x73\x73\x79\xd5\x0f\xab\xda\x16\x3d\x6e\x66\x75\x89\x8a\x6c\xbf\x09\xda\x45\x99\xc4\xaf\x15\xce\xe1\x3d\x27\xec\xf5\xc7\x3c\xb1\x61\x6a\x90\x13\x9e\x48\x74\x81\x3d\xdd\x0f\x56\xa0\x65\x62\xc3\x19\xd2\x6a\xc1\xbe\x5d\x5c\xf0\xd9\x67\x5e\x62\x4f\xf7\x2f\x07\x57\x63\x1e\x72\xbb\x50\x69\x12\x8f\x79\x68\x4d\x9a\xcc\xc6\x65\x58\x71\x83\x8a\x3e\xeb\x0c\x43\xa1\x2c\x1a\x7a\x8b\xb9\x36\xd8\x73\xf6\x56\xa8\x4d\xbf\x37\x17\x2a\xd3\xf3\x20\xd3\x69\xab\x2d\xf0\xbb\xfa\xf8\x81\x1f\x45\xf3\xf9\x3c\x9c\xb5\x45\x60\x7c\x5d\x85\x30\xd5\x65\x74\x3b\xfb\x6e\xfd\xc0\x9f\x71\xbf\x3f\x5e\x41\xce\x78\xcf\xef\x4c\xf8\x01\xf8\x5f\x8f\xd9\xfe\x70\x74\xf0\x66\xb0\xf7\x0f\xb6\xe7\x07\xb0\xf4\xb9\x94\x7a\x7e\xac\xd2\x42\x1b\xff\x10\xc8\xd4\xd8\xdc\xc9\xb5\xa8\x32\x97\x59\xf1\x19\xba\xd3\xaf\x4d\x72\x13\xff\x10\xa4\x4e\xdb\xb3\x3d\xac\x38\x15\xee\x6c\x82\x5d\x98\x21\x7d\x41\x6e\xd2\xa2\xd7\x87\xdd\xdb\x88\x82\xdb\xe2\x16\x78\xbd\x49\xdb\xd1\xcb\x4d\x4f\xb9\xd6\x89\x5e\xc3\xc5\xd9\xfb\x33\x60\xf0\xef\x02\x15\xd8\x36\x08\x84\x85\x52\x5f\x63\x06\xa4\xc1\xa0\xca\xd0\xa0\x81\x39\xfa\x52\x82\xc2\xee\x31\xcf\xb2\x75\x34\xa1\x29\x41\x28\xd2\xe0\xf4\xc2\x87\x63\x30\x68\x2b\xad\x2c\x6e\x51\x45\x11\x88\xbc\xf7\xb3\x93\x24\x49\xc0\x8f\x3a\x24\xff\x8e\xb8\x28\x6a\x87\x6b\x6e\x40\xd5\xe5\x14\xcd\x59\xfe\x2f\xb4\xb5\x24\x0b\x09\x2c\x97\xaf\x44\xee\x78\x6a\x49\xe1\xbd\xe5\xa6\x81\xe5\xf2\x91\x25\x94\x16\x9b\x06\x06\xce\xbe\xc8\x9b\x66\xfc\x33\xa9\x41\xaa\x8d\xba\x2d\xeb\xca\xe9\x2e\xf8\x7f\xbb\x87\x98\xf8\xb0\x7b\x5f\xdf\x3d\xc0\x06\x1c\x23\x3c\xe0\xed\x61\x9a\x9f\xd2\x5f\x47\x9b\xa3\xef\x36\x6b\xdd\xca\x3b\x3b\x9b\xc8\x4f\xc8\x6d\x6d\x10\x48\x94\x08\x5a\x75\xdb\xc1\x20\x35\x98\x09\x72\x9b\xe6\x7e\xfc\x0f\xa3\xa8\x40\x59\x85\x9b\x5e\x76\x3f\xf4\x6d\x77\x77\x2d\xbf\x79\x1e\x95\x2d\x9c\x50\x33\xe6\x00\x99\x56\x6c\xaa\x6b\x95\x22\x73\xb8\xd1\xfd\x16\x73\x31\x26\x8e\x7b\xfd\xe5\x76\x3b\xe3\x35\x2a\x72\x37\x17\xa2\xc4\x33\x75\xee\x1a\x3a\x00\x3f\x6e\x2f\x31\xdb\x1b\x80\xc5\x54\xab\xcc\xba\x7e\x07\x5f\x69\xd5\x7e\xe9\xf0\x16\xd3\x3f\x84\x18\x9a\xfe\xb8\x79\x90\x6b\xef\x89\x5c\x6f\xdc\x65\x2f\x66\xc3\x67\x70\x0d\x9f\xc8\xe5\xde\x75\x7f\x18\xb3\x78\xf4\x0c\xb2\x78\xf4\x44\xb6\xbf\xb7\x55\x1c\x39\x6b\xcf\xf1\x36\x78\x22\xdd\x7e\x6b\x6e\xd0\xba\x7b\x96\xbd\xa7\x12\x0e\x3b\x7f\x83\x78\xf7\xaf\xb0\x3d\x01\x78\xd0\x5e\x58\xfc\x24\x17\x2b\x58\x8b\xe4\x40\x74\x4d\xbd\x55\xab\x07\x71\x3c\x18\x0c\x7e\x19\xb0\x17\x07\x7b\x8f\x06\x0c\xe3\x60\xf8\x68\x40\x3c\x8a\x83\x78\xf4\x38\xc6\x20\x0e\x86\x83\x3f\x41\x19\x38\x98\xed\xa0\x49\xb4\xfe\x1a\x98\x44\xee\x9b\xc6\x8d\xdd\x3f\x8f\x3f\x02\x00\x00\xff\xff\xa1\xa7\x43\x80\x91\x0c\x00\x00")

func templatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainTmpl,
		"templates/main.tmpl",
	)
}

func templatesMainTmpl() (*asset, error) {
	bytes, err := templatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.tmpl", size: 3217, mode: os.FileMode(420), modTime: time.Unix(1485186760, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xc1\x6e\xe3\x36\x10\xbd\xfb\x2b\x08\x9e\x2b\x33\xd8\x00\x3d\x14\xb2\x80\x20\x68\xb6\x8b\x06\xc9\x21\x5b\xf4\x68\x8c\xc9\x91\x34\x35\x35\x14\xc8\x91\x14\xf7\xeb\x0b\x5a\xf1\x3a\xad\xbd\xe8\xc6\xd9\xf6\x62\xcb\x33\x7c\x6f\xc6\x7c\x8f\x43\x95\x75\x08\x82\x51\x59\x0f\x29\xad\x74\x1f\x89\xa5\x28\x5a\x72\xa8\xab\x45\xd9\x7e\x38\x24\x46\x4a\x03\x78\xbf\x6b\xc9\x39\x64\x5d\xdd\xcd\x30\x4f\xbc\x4d\xa5\x69\x3f\x54\x8b\xd2\xd1\x78\x58\x3d\x93\xea\xbf\x07\xa7\x08\x7d\x3f\x47\x19\xc6\x73\x80\x82\x61\x54\x36\xf8\x22\x2f\xfd\x07\xda\x06\xbf\x4f\x15\xbe\x29\x02\x63\x21\x2d\x45\x37\x47\x3a\x77\x8c\xec\xbb\xbe\x3e\xa5\x5d\xaf\x5b\x04\x47\xdc\xe8\xea\x17\xf4\x7d\x69\xda\xeb\x6a\x51\x0e\xfe\xdc\x4a\x4f\x49\x32\x8f\xa7\x73\x59\x12\xec\x72\x16\x54\x1b\xb1\x5e\x69\xd3\xa2\xef\x0d\x58\x8b\x29\xd1\x86\x3c\xc9\x4e\x57\x37\xaf\x7f\x96\x06\xaa\x45\x69\x3c\xbd\x91\xd3\x86\xb0\x25\x4c\xc0\xae\x8f\x34\x82\xdd\xe9\xea\x76\x0e\x29\x60\xa7\x5e\x82\x97\xb2\x0b\xc6\x2e\x73\xdb\xc0\x8e\x84\x02\x27\x5d\x7d\xce\xb1\x3d\xf9\x31\xfa\x9a\xdf\x0c\x3e\x7f\x3a\x1a\xff\x2b\x71\x6e\x36\x61\x10\xf5\xf8\xf0\xf4\x3d\x15\x82\x4c\x3a\x24\x33\xb5\x20\x13\xba\xa0\xab\xdf\x5b\x10\x35\xa1\x72\xe1\x82\xed\x3b\xd0\x59\x88\x88\x31\xe9\xea\x76\x7e\x78\x0f\x55\x60\x01\x2b\x43\x26\x9b\x1f\xd5\x70\x09\x1f\xe3\x94\x74\xf5\x80\xd3\x7b\x9a\x91\x08\x9c\x7a\x88\xc8\x76\x07\xec\x9a\x30\x62\x64\x60\x8b\xa6\x8e\x88\x2e\x74\xa1\x26\xae\x43\xec\x20\x1b\xa4\x0e\xa4\xab\xbb\x39\xa1\x42\xad\x3e\x1d\x53\xff\xaf\x75\x6e\x03\x33\x5a\x51\x13\x49\xbb\xdf\xbd\xef\x66\xa0\x56\xa4\x4f\x3f\x19\x23\x13\x89\x60\x5c\xda\xd0\x99\xc7\x87\x27\x7d\xc0\x92\x0d\xfc\x32\x34\x95\x40\x6c\x50\x56\x7a\xbd\xf1\xc0\x5b\x5d\x7d\x9e\x31\x6f\x97\xe3\x50\x74\x9a\xa6\x65\x0d\x16\x37\x21\x6c\xdf\x54\xf9\xee\x05\xf4\xbe\xd2\x79\xc2\xa3\x23\xde\x97\xb6\xa1\xeb\x81\x77\x26\xd4\x35\x59\x2c\xea\x90\x09\xb2\xd2\xe0\x8b\x24\x20\x94\x84\x6c\xfa\xa6\xee\xee\xf7\xbc\x9f\xf8\xf2\xee\xfa\x61\xe3\xc9\x2e\x9b\x30\x3a\xf4\x34\x62\xdc\xed\x7b\x04\x6b\xc3\xc0\x92\xcc\x6f\xbf\x3e\x3e\x3c\x99\x34\x6c\x92\x8d\xb4\xc1\x98\xf2\xe9\xf8\xa6\xde\x7e\xee\x80\xbc\x02\x8f\x51\xbe\x3e\xfe\x0e\x5f\xf3\x5d\x76\x6a\xec\x57\xd7\xdd\xe9\x45\xe7\xc9\x22\xa7\xfd\x1d\x4b\x5d\x73\x3e\xb9\x5e\x53\xd7\x68\x05\x5e\x56\xfa\xf1\xe3\xbd\x56\x13\x39\x69\x57\xfa\xc7\x2b\xad\x52\xb4\x2b\x6d\xa8\x6b\x4c\x68\xfc\xb2\xcf\xf6\x5f\x94\xfd\xd7\x78\x04\x9f\x45\x75\x10\x1b\xe2\xc2\x63\x2d\x45\xea\x8a\xe2\x4a\x57\x8b\x1b\x9f\x0f\x1f\x0b\xb2\x28\x4a\x0a\x46\x20\x0f\x1b\x8f\x6a\x60\x87\x51\x49\x8b\xaa\x84\x73\x3b\x76\x54\xe2\xc5\x26\x07\x1b\x40\xb4\x2d\x8d\x98\xb2\x2c\xcb\x61\x6b\x5c\xb0\x26\xf4\xc8\xc5\x3c\x45\x3a\x64\x99\xfb\xb2\x68\x46\x8c\x89\x02\x9b\x6b\x73\x2a\xc1\x63\x8f\xac\x3e\x7e\xc1\xa8\xfb\x19\xa3\xc6\xeb\xe5\x55\x96\x44\x95\xa9\x07\x7e\xdd\x9a\xda\xf7\x87\xcf\x92\x87\x55\x9e\x27\xd4\xb4\xf9\x9f\x82\xf7\xba\x2a\x4d\x5e\x5e\xfd\xa0\xf0\xd9\x62\x2f\x6a\x6a\x31\xa2\x0a\xd2\x62\x9c\x28\xa1\xca\xe6\x45\xb7\x28\x4d\x7f\x2a\xf0\x51\x59\x72\xf9\x45\x08\xa7\x3e\xc4\xcc\xfc\xc5\x4b\x7f\xa4\xe2\x18\xa6\x3f\x31\xd7\xcb\xa8\x53\x50\xe7\x2e\x00\xf9\xe6\xdf\x41\x66\xd6\xbc\x5a\xfc\x15\x00\x00\xff\xff\xc2\xab\x14\xfd\xd1\x09\x00\x00")

func templatesPartialsFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterTmpl,
		"templates/partials/footer.tmpl",
	)
}

func templatesPartialsFooterTmpl() (*asset, error) {
	bytes, err := templatesPartialsFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/footer.tmpl", size: 2513, mode: os.FileMode(420), modTime: time.Unix(1484906205, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\xcd\x8e\xdb\x36\x10\xbe\xe7\x29\x06\xec\x25\x3d\xd0\xea\xad\x68\x20\x09\x68\xb7\x01\x1a\xa0\x4d\x8b\x5d\xe4\xd0\xd3\x62\x56\x1c\x53\xac\x29\x52\x25\x29\xef\x1a\x86\xde\xbd\xa0\xf5\x1b\x5b\xf2\xee\xa2\x39\x24\x3e\x89\xc3\xf9\xf9\xf8\xcd\x70\x38\x4e\x4b\x42\x41\x2e\x7f\x03\x00\x90\x22\x14\x1a\xbd\xcf\x98\xdf\xa9\x5a\x2b\xb3\x63\x50\x3a\xda\x66\xec\xbb\x0a\x95\x61\x10\xf0\x41\x19\x41\x4f\x19\xfb\x81\xe5\x77\x3b\x55\x43\xb0\x10\xb7\xa0\xb0\x26\x90\x09\x69\x82\xbd\x2b\xa1\xf6\xa0\x44\xc6\x6a\x94\xf4\x17\x86\x92\x0d\xae\x4b\x25\x88\xe5\xc7\xe3\xe6\xd3\xed\x87\xb6\x4d\x13\xa1\xf6\xf9\x9b\xc9\xa6\xd7\x7a\x74\x58\xd7\xe4\x58\xe7\xed\x7c\xb7\x03\x0d\x85\xd5\x3c\x2a\xce\xb4\xce\x35\x0b\xab\x4f\x6a\x5c\x4b\x6e\x0d\xf1\x50\x2a\x27\x3a\x49\x25\x26\xc9\x99\x87\x9e\x8c\x88\x5f\x5b\x69\xf9\x9c\x8a\x64\x41\xf7\xa4\xaf\x2a\x39\x44\x8d\x46\x0c\xbc\x2b\x32\x56\x86\x50\xfb\x77\x49\x52\x08\xb3\xb1\xc6\x6f\xa4\xdd\x6f\x9a\x5d\x82\xde\x53\xf0\x89\xaa\x50\x92\x4f\xac\xf1\x3c\xda\x6c\xfc\x5e\x32\x40\x1d\x32\xf6\xe7\x76\xab\x0a\x82\xad\x75\xf0\x11\x83\xb2\x06\x35\xdc\x05\x0c\xca\x07\x55\xf8\x25\xbc\x03\xf5\x93\xe0\x44\xed\x4b\x98\x09\x8f\xb6\xe3\xc1\x8f\xd4\xcc\x44\x31\x63\x9c\xfb\x0a\x6a\xa7\x4c\xe0\xbc\xcb\xe0\x25\x00\xa1\x3b\xc6\xd0\xc8\x06\x25\x8d\x19\x1f\x05\x2b\xc4\x89\x70\xae\x79\x7f\x1f\x54\xd0\xc4\xf2\x9b\x12\x8d\x24\x18\xe4\xef\xd2\x44\x84\x35\x2f\xe2\xd2\x8b\x0a\x54\xad\x44\x8d\xbf\xe3\x51\x6d\x81\xfe\x85\xcd\xef\xbd\x05\x30\x32\xac\x6d\xa7\x7b\x30\xb9\x8a\x25\x00\xaa\xb0\xa6\x3f\xff\x50\x0d\x49\x71\xd8\x1c\x8f\x9b\x3b\x15\xe8\x57\x1b\xaf\x42\xdb\x0e\xb5\xcd\xf2\x9b\x43\xe5\x90\x24\xbc\xbd\xf9\xfb\xfb\x98\x9f\xe3\x91\x8c\x68\xdb\xd7\x00\x2a\x0e\xaf\x05\xb4\x8a\xe6\xbd\x91\x5a\xf9\x12\xde\xbe\xff\xf8\x2c\x9a\x34\x11\x62\xa9\xc6\x84\x7e\x55\x91\x79\x2a\xac\x11\xe8\x0e\xdc\xe0\x1e\x5e\x5e\x72\xcf\x54\x5a\xd3\x55\x9a\xc1\x3d\x1f\x23\xb0\xc5\x98\x91\x27\x1f\xe0\x1f\x1f\x17\xbc\xd0\xd6\x50\x27\x5a\x2b\x46\xad\x56\xfc\x3c\x53\x4b\xb3\xde\x79\x1e\xdf\xec\xe0\x02\xc0\xac\x9f\x38\xd2\x84\x9e\x0a\xd4\x14\xcd\x58\x7e\xdb\x09\x60\x90\x5c\xdc\xec\x89\x7c\xad\xbe\x9a\x63\x54\x14\x4a\x2b\xac\xb6\xf2\xc0\xf2\x3f\xa6\xc5\xb7\x81\xde\xd0\xa3\x8f\xb0\x85\xc2\x6f\x03\x30\x3e\xd8\x26\x34\x9e\xe5\x3f\xc7\x8f\xaf\x07\xf3\xd4\x91\x16\xd1\x07\x74\x92\x42\xc6\xee\x1f\x34\xc6\xb5\x23\x9d\x31\x63\x6d\x4d\x86\x1c\x18\xeb\x68\x4b\xce\x91\x1b\xce\x39\x3c\x9f\x0f\xda\xca\xf9\xfb\xc9\xf2\x5f\xb4\x95\xaf\x3c\x76\x9a\x34\xd7\xdb\xd7\x6c\x39\xff\x9c\x35\xb4\xda\xa9\x6a\x68\x67\xcb\x4d\x2a\x35\x78\xde\x10\x1b\x3d\x98\x47\x3e\x78\x9c\x95\x9c\xd5\x8b\x8f\xf8\x94\x94\xcf\x54\xaf\x26\x25\xc5\x61\x4a\x8b\x36\x3d\x42\x76\xea\x90\x15\x99\x86\x07\x2b\xa5\x26\x06\xe8\x14\x8e\x1e\xbb\x00\xa3\xf2\x72\xd0\x68\x7e\xad\x12\x7c\x8d\x66\xc5\x34\xd0\x53\x88\x17\xca\x34\x69\x12\xd5\xd6\xf2\xb4\x90\xc0\x95\xe4\x5d\xa5\x06\x5e\xc4\x8d\x27\x74\x45\xd9\x51\xd3\x7d\x5f\x23\x67\xd0\x5e\x8e\xda\xef\xfe\x1f\x76\xee\x4e\x2e\xbe\x00\x3f\x0b\x85\x7d\x39\x4b\x43\xc4\x10\x67\x82\x53\xc9\x0a\x32\x6c\x7c\x44\xc7\x32\x38\xb1\x40\x4f\x35\x1a\x41\x22\x63\x5b\xd4\x7e\xed\x01\xbe\xbc\x10\x2f\x7d\x58\x3f\x33\x39\x25\x6f\x9c\x7b\x3e\xdd\x7e\x00\x96\xb0\xb6\xbd\xd0\xe1\x1c\x8b\xa0\xf6\xd4\x0f\x2d\x7d\x73\x99\x66\x53\xab\x05\x57\xc4\xb9\x50\xbe\xd6\x78\xe0\x0f\xda\x16\xbb\xd5\xec\x4c\x3d\xec\x0c\xbf\xd9\x4d\x53\x4a\x25\xf8\x8f\xe3\xbc\xf2\xd3\x6c\xfe\xff\xcd\x56\xf4\xe5\x5b\xcf\xd8\x37\xfa\x9d\x34\x19\xfe\x9b\xfd\x17\x00\x00\xff\xff\x6b\x9d\xbb\x59\xa5\x0d\x00\x00")

func templatesPartialsHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderTmpl,
		"templates/partials/header.tmpl",
	)
}

func templatesPartialsHeaderTmpl() (*asset, error) {
	bytes, err := templatesPartialsHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/header.tmpl", size: 3493, mode: os.FileMode(420), modTime: time.Unix(1485186697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/error.tmpl": templatesErrorTmpl,
	"templates/main.tmpl": templatesMainTmpl,
	"templates/partials/footer.tmpl": templatesPartialsFooterTmpl,
	"templates/partials/header.tmpl": templatesPartialsHeaderTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"error.tmpl": &bintree{templatesErrorTmpl, map[string]*bintree{}},
		"main.tmpl": &bintree{templatesMainTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.tmpl": &bintree{templatesPartialsFooterTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{templatesPartialsHeaderTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

