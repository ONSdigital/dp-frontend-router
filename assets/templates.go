// +build production
// Code generated by go-bindata.
// sources:
// templates/error.tmpl
// templates/main.tmpl
// templates/partials/footer.tmpl
// templates/partials/header.tmpl
// redirects/redirects.csv
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesErrorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x46\xbe\x3b\xd5\x5e\x51\x1a\x21\x01\x12\x48\x70\x5b\xc4\x71\x35\xb1\x27\xb5\x55\xc7\x63\x79\x26\xe9\x56\x4b\xfe\x1d\xa5\xb0\x2c\xad\x7a\xe2\xf4\xc6\xcf\x6f\x34\xe3\xf7\xdc\xf9\xb8\x80\x4b\x28\xb2\x37\x05\x0f\x64\x03\xa1\xa7\x0a\x92\x50\xc9\xf4\xcd\xbf\xf7\xa7\x8a\xa5\x50\xdd\xd8\xf0\x70\xa7\xe9\xe9\x49\xa3\x26\x82\x31\xcd\x12\xac\x0d\x98\x46\x6b\x07\x56\xe5\xc9\xf4\x2f\x2f\xd0\x7e\xaa\x95\x6b\xfb\x78\x11\xad\x6b\xb7\x0b\x0f\x7d\xd3\xed\x7c\x5c\xfa\xe6\x15\xef\xcc\x83\x82\x99\x92\xb5\x13\xd6\x9b\x85\x0e\x35\x7a\xbb\xa9\xee\xf1\x8e\x13\x78\x92\xa3\x72\xb1\x17\x62\x9c\x53\xb2\xa7\xe8\x35\x6c\x72\xac\x1a\x5d\xa2\xeb\xc6\x81\x9f\x61\xe0\x67\x6b\x0b\x7a\x4f\xfe\x77\x5d\xc9\x5b\x8f\xf5\x78\x7d\xb2\x56\xa8\x60\x45\x25\x6f\x13\x8d\x0a\x42\x4e\x23\x67\xf2\x66\x7b\xcd\x7f\x6f\xa9\x27\xb6\x1a\x62\xf5\x62\xfa\xe6\xcd\xb4\x8f\x24\xae\xc6\xb2\x4d\x80\x9f\x20\x38\xd2\xe7\xc7\x6f\x5f\x61\x5d\x9b\xae\xf4\x5f\x46\x38\xf3\x0c\xa2\x31\x25\xa0\xec\x78\xce\xba\xf9\x56\x79\x48\x34\x09\x94\x44\x28\x04\x1d\x42\xa8\x34\xee\xcd\x84\x31\x29\xbf\x3b\xd1\xd0\x3a\x9e\x26\xca\x2a\xef\x39\x4b\x7b\xe0\xa5\x9d\x8f\x06\x2e\x31\xee\xcd\x07\xce\x8a\x4e\xe1\xbb\x98\xde\xfd\xa9\x67\xe9\x76\xd8\xb7\xf0\x83\x00\x0b\x27\x3e\x44\x21\x18\xb9\x02\xe6\x33\xc4\xec\x38\x2f\x94\x23\x65\x47\xa0\x21\x0a\x4c\x78\x86\x80\x0b\x81\xc3\x59\xc8\xb7\xdd\xae\xfc\xcd\xfc\x16\xde\x22\xb9\xfe\x13\xaf\xf8\x2b\x00\x00\xff\xff\x38\x7a\x05\x98\xac\x02\x00\x00")

func templatesErrorTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorTmpl,
		"templates/error.tmpl",
	)
}

func templatesErrorTmpl() (*asset, error) {
	bytes, err := templatesErrorTmplBytes()
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	info := bindataFileInfo{name: "templates/error.tmpl", size: 684, mode: os.FileMode(420), modTime: time.Unix(1519374285, 0)}
=======
	info := bindataFileInfo{name: "templates/error.tmpl", size: 684, mode: os.FileMode(420), modTime: time.Unix(1513155567, 0)}
>>>>>>> develop
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x61\x6f\xdb\x38\x12\xfd\xbc\xf9\x15\xb3\x5a\xe0\x64\x37\xa2\x64\x6d\x2e\x3e\x27\xb6\x02\xa4\xdb\x60\x2f\x40\xdb\x04\xd7\x14\x77\x87\x20\x40\x69\x69\x24\xb1\xa5\x48\x95\x1c\xd9\x35\x1c\xfd\xf7\x03\x65\x3b\x71\xdc\x34\x97\x45\xd0\x2f\xa2\xa8\x99\x79\xef\xcd\x70\x48\xd3\x93\x5f\xdf\x5c\xfc\x71\xf5\xdf\xcb\x33\x28\xa9\x92\x27\x7b\x93\xcd\x80\x3c\x3b\xd9\x03\x00\x98\x90\x20\x89\x27\xe7\x8a\xd0\x28\x2e\xc1\xa2\x99\xa1\x01\x34\x46\x1b\x60\x70\x91\xe7\x22\x45\xc8\xb5\x81\xf7\x9c\x84\x76\x2e\x1f\x88\x93\xb0\x24\x52\x3b\x89\x56\xd1\x2b\xa4\x0a\x89\x43\x49\x54\x33\xfc\xda\x88\x59\xe2\xfd\x87\x7d\x3c\x65\x7f\xe8\xaa\xe6\x24\xa6\x12\x3d\x48\xb5\x22\x54\x94\x78\xe7\x67\x09\x66\x05\x06\x69\x69\x74\x85\x49\xec\x41\xb4\x0d\x92\x96\xdc\x58\xa4\xc4\x6b\x28\x67\x23\xef\xa1\x6d\x83\x31\x17\x19\x95\x49\x86\x33\x91\x22\xeb\x26\x81\x50\x82\x04\x97\xcc\xa6\x5c\x62\x12\x87\x83\xa0\xb1\x68\xba\x29\x9f\xca\x8e\x47\xf1\x0a\x13\x6f\x26\x70\x5e\x6b\x43\xde\x36\xf2\xca\x94\x6b\x53\x71\x62\x19\x12\xa6\x2e\xe1\x2d\xd5\x84\x12\xeb\x52\x2b\x4c\x94\x7e\x24\x92\x4a\xac\x90\xa5\x5a\x6a\xb3\x15\xf4\xdb\xe1\xe8\xf0\xe8\xf0\xf5\x23\xfe\xbc\xae\x25\xb2\x4a\x4f\x85\x44\x36\xc7\x29\xe3\x75\xcd\x2c\x71\x6a\x2c\x9b\x72\xc3\x2c\x2d\x1e\x14\x6d\x07\x49\x0a\xf5\x05\x0c\xca\xc4\xb3\xa5\x36\x94\x36\x04\x22\x75\x7a\x4b\x83\x79\xe2\xb9\x85\xb0\xc7\x51\x94\x66\x2a\xd4\xca\x86\x85\x9e\x85\xcd\x97\x88\x5b\x8b\x64\x23\x51\xf1\x02\x6d\x94\xf3\x99\x8b\x09\x45\xaa\x3d\xa0\x45\x8d\x89\xd7\x59\xa2\x6f\xac\xc3\x3a\xd9\xdb\xfb\xe5\x97\xe5\xf2\xd3\xe4\x57\xc6\xae\x45\x0e\x92\x10\xce\xcf\x60\x74\x73\xf2\x09\x6e\xc1\xf2\x1c\xff\x79\xf5\xee\x6d\xdb\x76\x8a\x1e\x6a\x72\xe2\x6d\x89\x48\x1b\x41\xcb\x65\x78\xc9\xc9\xb5\xd9\x5b\x31\x35\xdc\x2c\x4e\x3b\x29\x97\x9c\xca\xb6\x8d\x52\x6b\x23\x2d\x33\x26\x30\x4c\xad\xf5\x4e\x36\xbc\xd7\xa8\x32\x91\xdf\x30\xf6\x18\xe3\x96\xb2\xf3\x33\x38\xfa\x39\xaa\x04\xb2\xa3\xb5\xa6\x3b\xce\x1f\xaa\x7a\x50\xad\x82\xd6\xb2\xdc\x87\x9f\xa2\xad\xe2\x42\xed\x6a\x63\xec\x09\x7d\x93\x68\xb5\xf5\x27\x53\x9d\x2d\x20\x95\xdc\x5a\xc7\x03\xe1\xd5\xa2\x46\x68\x5b\xb7\xe2\x2b\x24\x20\xac\x6a\xc9\x09\xc1\xab\xb9\x71\xdb\xca\x76\xb1\x68\x3c\x08\xa1\x6d\xf7\xd6\xfd\xcc\x85\x02\x91\x25\x9e\x7b\xf1\xc0\x68\x89\x9b\x77\xe2\x53\xa1\x32\xfc\x96\x78\x2c\x5e\x0b\x5c\x41\x2f\x04\xca\x6c\x5d\x82\x49\x97\xc3\x93\xac\xb9\xd6\xb4\xc3\x6a\x53\x23\x6a\xda\x60\xf6\xf2\x46\x75\x7b\xb5\x27\x02\x1b\xe8\xa0\x08\x4c\xc0\x83\xaa\xbf\x14\xd7\xfe\x9f\x5a\x17\x12\x4f\x15\x97\x0b\x77\x62\x5d\x4c\x3f\x63\x4a\xfe\x4d\x62\xc6\xe2\xda\xdc\x24\xee\x71\x7b\x7b\x17\xdf\x5f\x6e\x20\x9d\x21\xfc\x9a\xac\x86\xdb\xdb\xeb\x9b\x7e\x58\x37\xb6\xec\x71\x53\x34\x15\x2a\xb2\xfd\x36\xe8\x8c\x32\x89\x5f\x29\x9c\xc3\x1b\x4e\xd8\xeb\x8f\x79\x62\xc3\xd4\x20\x27\x3c\x93\xe8\x1c\x7b\xba\x1f\xac\x41\xab\xc4\x86\x05\xd2\xda\x60\x5f\x2f\xae\x78\xf1\x9e\x57\xd8\xd3\xfd\xeb\xc1\xcd\x98\x87\xdc\x2e\x54\x9a\xc4\x63\x1e\x5a\x93\x26\xc5\xb8\x0a\x6b\x6e\x50\xd1\x7b\x9d\x61\x28\x94\x45\x43\xaf\x31\xd7\x06\x7b\x2e\xbd\x35\x6a\xdb\xef\xcd\x85\xca\xf4\x3c\xc8\x74\xda\x69\x0b\xfc\x55\x7d\xfc\xc0\x8f\xa2\xf9\x7c\x1e\x16\x5d\x11\x18\xdf\x54\x21\x4c\x75\x15\xdd\xcf\x3e\x5b\x3f\xf0\x0b\xee\xf7\xc7\x6b\xc8\x82\xf7\xfc\x55\x12\x7e\x00\xfe\xc7\x53\x76\x38\x1c\x1d\xfd\x3e\x38\xf8\x07\x3b\xf0\x03\x58\xfa\x5c\x4a\x3d\x3f\x55\x69\xa9\x8d\x7f\x0c\x64\x1a\x6c\x1f\xc4\x5a\x54\x99\x8b\xac\x79\x81\xee\xa8\xed\x82\xdc\xc4\x3f\x06\xa9\xd3\xee\x87\x24\xac\x39\x95\xee\x20\x84\x7d\x28\x90\x3e\x20\x37\x69\xd9\xeb\xc3\xfe\xbd\x47\xc9\x6d\x79\x0f\xbc\x59\xa4\x6d\xef\xe5\x5d\x57\xb9\xe6\x89\x5e\xc1\xd5\xc5\x9b\x0b\x60\xf0\xef\x12\x15\xd8\xce\x09\x84\x85\x4a\xcf\x30\x03\xd2\x60\x50\x65\x68\xd0\xc0\x1c\x7d\x29\x41\xe1\xea\x33\xcf\xb2\x8d\x37\xa1\xa9\x40\x28\xd2\xe0\xf4\xc2\x9f\xa7\x60\xd0\xd6\x5a\x59\xdc\xa2\x8a\x22\x10\x79\xef\xfb\x4c\x92\x24\x01\x3f\x5a\x21\xf9\x0f\xc4\x45\x51\x37\xcc\xb8\x01\xd5\x54\x53\x34\x17\xf9\xbf\xd0\x36\x92\x2c\x24\xb0\x5c\xfe\x26\x72\xc7\xd3\x48\x0a\x77\xcc\x6d\x0b\xcb\xe5\x13\x26\x94\x16\xdb\x16\x06\x2e\x7d\x91\xb7\xed\xf8\x7b\x52\x83\xd4\x18\x75\x5f\xd6\x75\xa6\xfb\xe0\xff\x6d\x07\x31\xf1\x61\x7f\x57\xdf\x0e\x60\x0b\x8e\x11\x1e\xc9\xed\x71\x9a\xef\xc2\x5f\x45\x77\x87\xdf\x7d\xd4\xa6\x95\xf7\xf6\xee\x3c\xdf\x21\xb7\x8d\x41\x20\x51\x21\x68\xb5\x5a\x0e\x06\xa9\xc1\x4c\x90\x5b\x34\xf7\x03\x77\x1c\x45\x25\xca\x3a\xbc\xeb\x65\x77\xab\xe8\xba\x7b\xd5\xf2\x77\xdf\xa3\xaa\x83\x13\xaa\x60\x0e\x90\x69\xc5\xa6\xba\x51\x29\x32\x87\x1b\xed\xb6\x98\xf3\x31\x71\xdc\xeb\x2f\xb7\xdb\x19\x67\xa8\xc8\xbd\x5c\x89\x0a\x2f\xd4\xa5\x6b\xe8\x00\xfc\xb8\x7b\xc4\xec\x60\x00\x16\x53\xad\x32\xeb\xfa\x1d\x7c\xa5\x55\x77\xad\xe2\x1d\xa6\x7f\x0c\x31\xb4\xfd\x71\xfb\x28\xd7\xc1\x33\xb9\x7e\x77\x8f\x83\x98\x0d\x5f\xc0\x35\x7c\x26\x97\xdb\xeb\xfe\x30\x66\xf1\xe8\x05\x64\xf1\xe8\x99\x6c\x7f\xef\xaa\x38\x72\xa9\xbd\x24\xb7\xc1\x33\xe9\x0e\xbb\xe4\x06\x5d\x76\x2f\x4a\xef\xb9\x84\xc3\x55\x7e\x83\x78\xff\xaf\xb0\x3d\x03\x78\xd0\x3d\x58\xfc\xac\x2c\xd6\xb0\x16\xc9\x81\xe8\x86\x7a\xeb\x56\x0f\xe2\x78\x30\x18\xfc\xd0\xe1\x20\x0e\x0e\x9e\x74\x18\xc6\xc1\xf0\x49\x87\x78\x14\x07\xf1\xe8\x69\x8c\x41\x1c\x0c\x07\xff\x07\x65\xe0\x60\xb6\x9d\x26\xd1\xe6\x36\x30\x89\xdc\xad\xc6\x8d\xab\xbf\x39\xff\x0b\x00\x00\xff\xff\x7a\x33\xfb\x9b\xfe\x0c\x00\x00")

func templatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainTmpl,
		"templates/main.tmpl",
	)
}

func templatesMainTmpl() (*asset, error) {
	bytes, err := templatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	info := bindataFileInfo{name: "templates/main.tmpl", size: 3326, mode: os.FileMode(420), modTime: time.Unix(1519374914, 0)}
=======
	info := bindataFileInfo{name: "templates/main.tmpl", size: 3324, mode: os.FileMode(420), modTime: time.Unix(1513155567, 0)}
>>>>>>> develop
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x4d\x6f\xe3\x36\x10\xbd\xef\xaf\x20\x78\xae\xcc\x60\x03\xf4\x50\xc8\x02\x82\xb4\xd9\x2e\x1a\x24\x87\xa4\xe8\x31\x18\x93\x23\x71\x6a\x8a\x14\xc8\x91\x14\x77\xb1\xff\xbd\xa0\x15\xc7\x8e\xed\x60\x3f\xd0\x36\x46\x6f\xe4\xcc\xbc\xe1\x1b\xf3\x71\x34\x2e\xeb\x10\x18\xa3\xd0\x0e\x52\x9a\xcb\x2e\x92\xe7\xa2\xb0\x64\x50\x56\xef\x84\x10\xa5\x7d\xbf\xf1\x0d\x94\x7a\x70\x6e\x65\xc9\x18\xf4\xb2\xba\x9a\x90\x8e\xfc\x32\x95\xca\xbe\x9f\xe2\x0d\x0d\x1b\xc0\x94\x7a\xca\xb3\xe7\x1a\x23\x74\xdd\x8e\x2f\xbb\x3d\x0c\x3b\xdb\xa3\xb9\x0a\x0f\x83\xd0\xc1\x15\x19\x2f\x5f\x46\xef\x01\x74\x70\xeb\xc8\xc2\x35\x45\xf0\x58\xb0\xa5\x68\x26\x4b\x6b\xb6\x96\xc3\x24\xeb\xa2\xcf\x0f\xcf\x7d\x78\xb0\x08\x86\x7c\x23\xab\x5f\xd1\x75\xa5\xb2\xe7\x47\xb1\xbd\x3b\x86\x75\x94\xf8\xe8\x59\x19\xe2\xe8\x18\x84\x18\xdb\xd7\x20\x19\x05\xc2\x46\xac\xe7\xf2\xd3\xa7\xd9\x3d\x3c\x06\x1f\xda\xd5\xcf\xa1\x05\xf2\x9f\x3f\x2b\x8b\xae\x53\xa0\x35\xa6\x44\x0b\x72\xc4\x2b\x59\x5d\xec\x6e\x4b\x05\xaf\xb1\x51\x8e\xfe\x63\xa2\x3a\x84\x25\x61\x02\x6f\xba\x48\x03\xe8\x95\xac\x2e\x27\x93\x00\x6f\xc4\x93\xf1\xa4\x28\x33\xc6\x36\x13\xd6\xc1\x1b\x62\x0a\x3e\xc9\xea\x3e\xdb\xd6\x8c\xb7\xd6\x6f\x27\x5d\xaa\xde\x1d\x2a\x5b\x19\x1a\xde\x4c\xef\x17\x8b\xd0\xb3\xb8\xbd\xb9\x3b\x6d\xd1\x43\xa6\xd9\x27\x35\x5a\xe0\x11\x4d\x90\xd5\x1f\x16\x58\x8c\x28\x4c\x38\x15\xf1\x6c\x38\x6a\x88\x88\x31\xc9\xea\x72\x5a\x9c\x1c\xbf\xe0\x19\x34\xf7\x99\xe1\xb4\x14\xfd\xc9\x90\xf4\x38\x26\x59\xdd\xe0\x78\x32\x8c\x36\x3f\x1b\x47\xf0\xa9\x83\x88\x5e\xaf\xc0\x9b\x26\x0c\x18\x3d\x78\x8d\xaa\x8e\x88\x26\xb4\xa1\x26\x5f\x87\xd8\x42\xee\x0e\x75\x20\x59\x5d\x4d\x0e\x11\x6a\xf1\x71\xeb\xfa\x5f\xf4\x8d\xcb\xe0\x3d\x6a\x16\x23\xb1\x5d\xcb\xe7\x54\xba\x87\x65\xee\xd2\x4f\x4a\xf1\x48\xcc\x18\x67\x3a\xb4\xea\xf6\xe6\x4e\x6e\x72\x92\x0e\xfe\x69\x0a\x12\x0c\xb1\x41\x9e\xcb\x87\x85\x03\xbf\x94\xd5\xfd\x84\x79\x0b\xe5\x6d\x68\x8f\xe3\x38\xab\x41\xe3\x22\x84\xe5\x37\x71\xbf\x7a\x02\xbd\x35\xf9\x3c\x33\xa2\x21\xbf\x26\xaf\x43\xdb\x81\x5f\xa9\x50\xd7\xa4\xb1\xa8\x43\x4e\x9c\xdf\x00\xb8\x22\x31\x30\x25\x26\x9d\xbe\xaa\xbe\xeb\x75\xde\x8f\xdf\xf1\x7a\xfe\xb9\xfa\xba\x7e\xe1\x48\xcf\x9a\x30\x18\x74\x34\x60\x5c\xad\xab\x04\xad\x43\xef\x39\xa9\xdf\x7f\xbb\xbd\xb9\x53\xa9\x5f\x24\x1d\x69\x81\x31\xe5\x76\xf6\x55\xd5\xfd\xd2\x02\x39\x01\x0e\x23\xff\x8b\x73\xc5\xbe\xa9\x54\x3b\x83\xf9\x0b\xe7\x97\x06\xfa\xc3\xf1\xdd\x91\x46\x9f\x70\xef\xe7\x2c\xa9\x6d\x8e\x07\x3e\x3c\x50\xdb\x48\x01\x8e\xe7\xf2\xf6\xc3\xb5\x14\x23\x19\xb6\x73\xf9\xe3\x99\x14\x29\xea\xb9\x54\xd4\x36\x2a\x34\x6e\xd6\xe5\x7e\xf3\x32\x6b\xf7\x5a\x4e\xc6\x47\x16\x2d\xc4\x86\x7c\xe1\xb0\xe6\x22\xb5\x45\x71\x76\x78\xc7\x17\x2e\xb7\x46\xcf\xe8\x59\x50\x12\x30\x00\x39\x58\x38\x14\xbd\x37\x18\x05\x5b\xcc\xb7\x7f\xe4\xe2\xb6\x82\x78\xd2\xfb\x46\xcf\x10\xb5\xa5\x01\x53\x56\xc7\xac\x5f\x2a\x13\xb4\x0a\x1d\xfa\x62\xfa\x50\xb4\xe8\x79\xa2\xa9\x51\x0d\x18\x13\x05\xaf\xce\xd5\xa1\x12\x6e\x3b\xf4\xe2\xc3\x33\x46\x5c\x4f\x18\x31\x9c\xcf\xce\xb2\x32\x44\x99\x3a\xf0\xbb\xd4\xc4\x9a\x1f\x3e\x72\xfe\x1e\xe5\x6e\x4f\x8d\xcd\x85\x83\x73\xb2\x2a\x55\x0e\xaf\x7e\x10\xf8\xa8\xb1\x63\x31\x5a\x8c\x28\x02\x5b\x8c\x23\x25\x14\xf9\x15\xa2\xd9\x53\x49\xf7\x42\x23\xbb\xb2\x78\xde\xec\xac\xb2\x16\xc8\xe4\x3f\x91\x38\x76\x21\xe6\xa3\x9f\x35\xff\x67\x2a\xb6\x66\xfa\x0b\x33\xa1\xd7\x81\xad\xf9\x4e\xa0\x6b\xbe\x0c\x2c\xd5\x24\x96\xea\xdd\xdf\x01\x00\x00\xff\xff\x67\x15\x8a\xeb\x19\x0f\x00\x00")

func templatesPartialsFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsFooterTmpl,
		"templates/partials/footer.tmpl",
	)
}

func templatesPartialsFooterTmpl() (*asset, error) {
	bytes, err := templatesPartialsFooterTmplBytes()
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	info := bindataFileInfo{name: "templates/partials/footer.tmpl", size: 3865, mode: os.FileMode(420), modTime: time.Unix(1519374932, 0)}
=======
	info := bindataFileInfo{name: "templates/partials/footer.tmpl", size: 2545, mode: os.FileMode(420), modTime: time.Unix(1513155567, 0)}
>>>>>>> develop
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xb8\x71\x2f\xdd\x03\xad\x61\x2f\x5b\x0b\x59\xc0\xd6\x05\x68\x80\xb6\x1b\x92\xf6\x61\x28\x82\xf4\x22\x9e\x25\xce\x14\xa9\x91\xb4\x13\x43\xd3\x77\x1f\x68\xfd\x8d\x2d\x39\x09\x56\x6c\xad\x9f\xa4\xd3\xfd\xbf\x1f\x7f\x3c\xc7\x39\xa1\x20\x9b\x3c\x03\x00\x88\x11\x52\x85\xce\x2d\x99\x5b\xcb\x52\x49\xbd\x66\x90\x5b\x5a\x2d\xd9\xb7\x05\x4a\xcd\xc0\xe3\x8d\xd4\x82\xee\x96\xec\x7b\x96\x5c\xae\x65\x09\xde\x40\xf8\x04\xa9\xd1\x9e\xb4\x8f\x23\x6c\x5d\x09\xb9\x05\x29\x96\xac\xc4\x8c\x7e\x47\x9f\xb3\xce\x75\x2e\x05\xb1\xa4\xaa\x16\x1f\x2e\xce\xeb\x3a\x8e\x84\xdc\x26\xcf\x06\x9b\x56\xeb\xd6\x62\x59\x92\x65\x8d\xb7\xc3\xaf\x4d\xd2\x90\x1a\xc5\x83\xe2\x48\xeb\x50\x33\x35\x6a\xaf\xc6\x55\xc6\x8d\x26\xee\x73\x69\x45\x23\x29\xc4\x20\x39\xf0\xd0\x36\x23\xe4\xaf\x4c\x66\xf8\xb8\x15\xd1\x84\x6e\xf8\x55\xd5\xa7\xf8\x1b\xce\x3f\xca\x15\x28\x4f\x70\x7e\x06\x3f\x5d\x25\x9f\xe0\x6f\x70\xb8\xa2\xd7\xef\xdf\xbe\xa9\xeb\x49\xbb\x7d\x2c\x59\x64\x5d\xc6\x21\x20\x03\x67\xd3\x25\xcb\xbd\x2f\xdd\xcb\x28\x4a\x85\x5e\x18\xed\x16\x99\xd9\x2e\x36\xeb\x08\x9d\x23\xef\x22\x59\x60\x46\x2e\x32\xda\xf1\x60\x13\x6d\x7f\xe8\x9f\x17\xa5\xce\x18\xa0\xf2\x4b\xf6\xdb\x6a\x25\x53\x82\x95\xb1\xf0\x0e\xbd\x34\x1a\x15\x5c\x7a\xf4\xd2\x79\x99\xba\x53\xb5\x7c\x24\x2d\xe4\xea\x8a\xf3\xc7\x54\x31\xaa\x3e\x6b\xaa\x7f\x71\x95\x04\xc9\xff\xd6\x02\xb7\xfd\x0f\x5b\xd0\xe3\x7e\x10\xec\x71\x7d\x4f\x34\x03\x4b\x7f\x6b\x1a\x10\xba\x1e\x97\x23\x51\x38\x2e\x9c\xbb\x02\x4a\x2b\xb5\xe7\xbc\x39\x3e\xc7\x09\x08\xd5\xc0\x15\x75\xb6\xc1\x8c\xfa\xe3\xd6\x0b\xa6\xcb\x8c\x85\x3f\xd4\xbc\xbe\xf6\xd2\x2b\x62\xc9\xab\x1c\x75\x46\xd0\xc9\x5f\xc6\x91\xf0\x73\x5e\xc4\xb1\x17\xe9\xa9\x98\x89\xda\x34\x58\xae\x80\xfe\x82\xc5\x9b\xd6\x02\x18\x69\x56\xd7\x03\x09\x0d\xae\xc2\xf9\x03\x99\x1a\xdd\xd6\xdf\x1d\xc5\x28\xdd\x2d\xaa\x6a\x71\x29\x3d\xfd\x6a\x02\x0f\xd5\x75\x47\x2c\x2c\x79\xb5\x2b\x2c\x52\x06\xcf\x5f\xfd\xf1\x5d\x98\x4f\x55\x91\x16\x27\x10\x38\x91\x50\xba\x7b\x6a\x42\xb3\xd9\x9c\xe9\x4c\x49\x97\xc3\xf3\xb3\x77\x0f\x66\x13\x47\x42\x4c\x8c\x38\x12\xea\x49\x20\x73\x94\x1a\x2d\xd0\xee\xb8\xc6\x2d\x3c\x1e\x72\x0f\x20\x6d\xd3\x20\x4d\xe3\x96\xf7\x11\xd8\x64\xcc\xd0\x27\xe7\xe1\x4f\x17\x5e\x78\xaa\x8c\xa6\x46\x34\x07\x46\x25\x67\xfc\x3c\x80\xa5\xd1\xc5\x75\x18\x5f\xaf\xe1\x28\x81\x81\xcc\xab\x0a\x16\xef\xf1\xce\x68\x53\xec\x9a\x99\x41\x5d\x47\x96\x14\xa1\xa3\x14\x15\x05\x5f\x2c\xb9\x68\x04\xd0\x49\x8e\x8e\xfb\x30\x11\x25\xbf\xec\xda\x0a\xf2\xb9\x11\x46\x99\x6c\xc7\x92\xb7\xc3\xcb\x57\x5c\x92\xa6\x5b\x17\x6a\x11\x12\xbf\xe2\x2a\xf0\xc6\x6c\xfc\xc6\xb1\xe4\xe7\xf0\xf0\xe5\x14\x32\xb0\xdc\x64\x49\x1e\x6d\x46\x7e\xc9\xae\x6f\x14\x86\x77\x4b\x6a\xc9\xb4\x31\x25\x69\xb2\xa0\x8d\xa5\x15\x59\x4b\xb6\x2b\xbe\xbb\xd0\x6f\x94\xc9\xc6\x37\x3a\x4b\x7e\x51\x26\x7b\x62\xd9\x71\xb4\x39\x4d\x89\xa3\xd7\xf1\xe3\x88\x24\x4b\x2b\x8b\x8e\x22\xa7\x89\x2f\xd6\x78\x48\xb2\x1b\xd5\x99\x87\x7e\xf0\xb0\xfc\x5a\xa3\xa6\x56\x89\xd1\x50\xee\xa9\x9e\x1c\x4a\x8c\xdd\xda\x1d\x6c\xda\x0c\xd9\x9e\x75\x0b\xd2\x1b\xee\x4d\x96\x29\x62\x80\x56\x62\xef\xb1\x09\xd0\x2b\x4f\x07\x0d\xe6\xa7\x90\xe0\x4a\xd4\x33\xa6\x9e\xee\x7c\x38\x65\x7a\x13\x47\x41\x6d\x6e\x4e\x13\x03\x9c\x19\xde\xc9\xd6\xc0\xa3\x7a\xe3\x08\x6d\x9a\x37\xad\x69\x9e\x4f\x35\xa7\xd3\x9e\x8e\xda\x7e\xfd\x37\xdd\xb9\xdc\xbb\xf8\x0c\xfd\x99\x00\xf6\xf1\x9f\x23\x08\x39\x04\xfa\xd8\x43\x56\x90\x66\xfd\xc5\xdc\xc3\x60\xdf\x05\xba\x2b\x51\x0b\x12\x4b\xb6\x42\xe5\xe6\x2e\xf5\xe3\x03\xf1\xd8\xcb\xfa\x9e\xc9\x7e\x78\xfd\x2e\xf5\xe1\xe2\x1c\x58\xc4\xea\xfa\x48\x87\x73\x4c\xbd\xdc\x52\xbb\x08\xb5\xe4\x32\xec\xbb\x46\x09\x2e\x89\x73\x21\x5d\xa9\x70\xc7\x6f\x94\x49\xd7\xb3\xd3\x19\x38\xec\x20\x7f\xbd\x1e\x36\x9f\x42\xf0\x1f\xfb\x1d\xe8\xc5\xe8\x0f\xdd\x6b\x53\xd0\xe7\xa7\x9e\x9e\x37\xda\x2f\x71\xd4\xfd\xd9\xfe\x27\x00\x00\xff\xff\x4e\xec\x16\x9e\x76\x0f\x00\x00")

func templatesPartialsHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeaderTmpl,
		"templates/partials/header.tmpl",
	)
}

func templatesPartialsHeaderTmpl() (*asset, error) {
	bytes, err := templatesPartialsHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	info := bindataFileInfo{name: "templates/partials/header.tmpl", size: 3958, mode: os.FileMode(420), modTime: time.Unix(1519374854, 0)}
=======
	info := bindataFileInfo{name: "templates/partials/header.tmpl", size: 3874, mode: os.FileMode(420), modTime: time.Unix(1513155567, 0)}
>>>>>>> develop
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _redirectsRedirectsCsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5c\xcf\xb6\xdb\x28\xd2\xdf\xdf\x67\x89\xa2\x24\xdd\xfd\x7d\xe7\xcc\x36\x67\x16\xbd\xe9\x5e\xe4\x01\x72\x30\x94\xa4\x8a\x11\xa5\x5b\x80\x6e\x3c\x4f\x3f\x07\xd0\x5f\x5b\xb6\x25\x5b\xb7\xbb\x67\x93\x6b\x09\xf8\xfd\xaa\x80\x2a\x8a\x02\x25\x07\x49\x86\xea\x53\x5e\x32\x59\xab\xa8\x06\xeb\x50\x36\x4c\xca\x4b\x57\xaa\x26\x7f\xad\xd1\x5e\x2b\x7c\xad\xf1\xc3\x5d\x80\x1a\x5c\x45\x8a\x34\x95\x08\xb7\x90\x5e\xf2\x06\xa8\xd1\xd0\x50\xe3\xb5\x70\x48\x46\x18\x25\xa9\xae\xbd\x41\x77\xca\x2b\xf2\x16\x4d\x99\xe4\x09\x0f\xd0\x30\x4a\xb0\x4e\x38\x0c\x58\xb6\x20\xb6\xb5\xd0\x5a\x30\x08\x1b\x25\x5b\x85\x37\x17\x6f\x0d\xf0\xcb\xa0\xb2\x49\xb0\x5a\x48\x49\xde\x38\x9b\xfb\xa3\x05\xe9\x88\x87\x17\x51\x5a\x34\x0a\x7e\x52\x61\x81\xdb\x00\x3c\xeb\xb5\xfb\x10\x73\x01\x2f\xb1\x5e\x72\xa8\x1b\x4d\xa7\x1a\x8c\x13\x46\x69\x71\x20\xcf\xb5\xe0\x23\xb8\xae\x07\xd0\xbc\x11\x1f\xf3\x54\xd2\xf5\x39\xb6\xa1\x13\xa2\x78\x97\xef\x93\x84\x0f\xa3\xce\x25\x5e\x84\x1f\xfb\xb0\xa4\x16\xd8\x04\x9a\xc6\x1f\x34\xca\x4e\x7b\xa3\x9c\xf8\x09\x36\x9f\xbe\x2c\xd0\x08\x23\x21\x49\xbd\x50\x60\x85\x51\x23\x9c\x82\x02\x25\x06\xe1\x15\x1c\x9c\x37\x0a\xd8\x55\x50\x0b\x61\x1d\xa3\xac\x9c\x63\x10\xbd\xaa\x8f\xcb\x32\xd7\x75\x3f\xa1\xc6\x0e\x42\x53\x0c\xd3\x37\xce\x4c\x34\x2a\x0c\x7d\xd7\x0d\xb1\x5f\x81\xa7\x25\x33\x9d\xae\x36\x3f\x93\x7c\x19\xe7\x25\x3f\x04\x33\x01\x6b\xd1\x28\x6f\x1d\x9f\x42\x6f\xb0\x50\x90\x33\x38\x81\xba\x7f\x9d\xa4\x49\xef\xac\xd0\x60\xe3\x44\x8d\x92\xac\x45\x98\x0b\x74\x0e\xc5\x16\x37\x74\xcb\x68\xc7\xb1\x71\xd5\xe0\x23\x9d\xe2\x8f\x8b\x38\x8f\x3a\x80\xde\x06\xc8\x3c\xe5\x02\xfc\x71\x09\xef\x86\x50\x07\xa1\xc3\x4c\xa4\xa2\x11\xd1\x9e\x3b\xa9\xfc\x31\x0e\xc3\x6d\x59\x2e\xdb\x9e\x0b\xd3\x83\xdc\xf1\xdf\xb3\xd7\x35\x96\x1c\x7f\x4f\x5e\x87\x15\xa1\x16\xae\x1f\xc1\x2f\x9f\x3e\x7f\x96\x60\xac\xb7\x33\x4f\x0c\xa6\xd4\xc2\x28\x61\xd4\x5b\x98\x1a\xb5\x60\x59\x85\xaa\xf7\x1d\xfe\x06\x01\xe6\x2a\x6e\x97\xe4\xde\x52\x06\x42\xbb\x4a\x18\x65\x49\xa2\xd0\x52\x30\xe4\x52\x78\x0b\x96\x0a\x05\xc2\x55\xa9\x07\x84\x96\x54\x91\x66\xd0\xc2\x81\x8a\x05\x16\x8d\xab\xc0\x1f\x57\x2c\x6f\x77\x39\xe6\x4a\xde\x26\xbb\xe1\x06\xfa\x82\xe1\x47\xbf\x34\x75\x4a\x18\xe3\x85\x1e\xca\x3c\xb7\x70\xba\xed\x15\xae\x03\x9e\x49\xbc\x8c\xbc\xf3\x34\x4c\x2c\x35\xaa\x13\x08\x5e\xa8\xf5\x8e\xf3\x6e\x05\xf5\xea\xb5\x7f\x56\x2d\x3d\x00\xb8\x53\x33\x57\x73\x24\x49\xdd\x29\x1a\xbb\x25\x14\xb8\x41\xb2\xa4\xd9\x32\xdb\x4e\xb6\xd3\x12\x2a\x71\xd0\x50\x13\x3b\xa1\xd1\x9d\xd0\x9c\x19\xec\x3b\xd8\xd0\x2a\xd2\x3b\x0a\x1e\x90\x5d\x65\x93\x01\x86\x09\x23\x98\x51\x94\x60\xf3\xf4\x2a\xa9\x17\x2b\x05\x83\x65\xe7\x02\x61\xf0\x47\x68\x0a\x11\x02\x8c\x50\xeb\xbe\x6e\xf7\x68\xe6\x9a\xad\xe0\x5b\xe3\x22\x44\x17\x00\x5a\xfc\x0f\x84\x99\x44\x32\xd9\x42\xd2\xa9\xab\xa5\xa0\xa6\x92\x45\x53\xad\xf5\x13\xd7\x50\xcf\x54\x58\x82\x9f\x86\x13\x2d\x58\x17\x57\xb8\x06\x8c\x0d\x93\x32\x32\x79\xdb\x2f\x97\xa3\x20\x7d\xcd\xb3\x90\xe2\x06\xc0\xb2\x28\x33\xa4\xdd\x4c\xb9\x47\x67\x28\xd1\x3a\xe0\xb1\x7e\x32\xb3\x03\xc3\xfb\x58\xf5\x4a\xe2\x47\x0c\x9c\x8c\x42\xd7\x75\xa9\x42\x0b\xc2\xf6\xda\xca\x10\x9d\x70\xa2\x4c\x9e\x75\x5c\xa4\x1f\xb4\xf0\x45\xb2\xb9\xaa\x77\x58\xdf\x43\xc5\xd0\x87\xd8\x0a\x3d\x10\x85\xb5\x4f\x6b\x70\x68\xde\x5d\xd1\x3b\xdc\x9b\xe3\x61\x29\x1a\x74\x01\x8e\xe4\x31\x90\x77\xcf\x32\xac\x04\x75\xf3\x74\x80\xbc\x0a\x7e\x0f\x37\x2c\x2b\xd4\x6a\x70\xf6\x5b\x26\xde\x36\xf7\x7b\x83\x67\xb5\xdb\x98\x6e\x4d\x1b\x60\x4b\xc6\x80\xee\xd4\xc0\x16\x75\x1f\x65\xcd\x95\x78\x0a\xfc\x4c\x89\x6b\x2c\xbb\x79\x3e\xa9\x05\xd6\xc2\xb8\x38\x29\xde\xc5\xc5\x9d\x33\x3c\x3a\x89\x24\x19\x09\x4d\x57\xbf\x00\x76\x18\x06\x96\xc7\xb0\x73\xac\xb0\xcb\xac\xba\xc5\x77\xa6\xe1\x32\xf1\x0d\x13\xb7\xc2\x81\xd6\xe8\xe0\xcc\xc6\xa3\xb5\x01\x3b\x06\xa3\xee\xe4\xbc\x2e\x21\x2e\x84\x9a\x63\xed\x61\xbc\xfd\x1e\xa7\x25\xdd\xa2\x29\xa5\x26\xeb\x18\x15\xfa\x5a\x61\x51\xa0\x44\x0d\x2b\xe3\xc4\x6d\xc6\xbc\x81\xf7\x1d\xd4\xac\xd9\x8a\xbf\x42\xad\x29\xcf\x7e\x6a\x74\xdb\x53\x47\x8a\x7d\xd9\x10\x5a\x32\x68\xca\x07\x42\xfb\x47\x74\x5b\x4f\xfe\xb0\xc2\xd8\x12\xf7\x09\xce\xee\xc1\xee\xaa\x5d\x47\x70\xa6\xde\x0d\xa6\x1b\x61\x7d\x4c\x63\xa2\x71\xc0\x26\x44\x02\xd3\x3c\x20\x04\x59\x80\x25\xdc\x0e\xe1\x97\x11\xe6\xc2\x4d\xa1\x46\x2f\x04\xa6\x45\xa6\x98\x52\x9d\xf8\x91\xc4\xbd\x54\x44\x46\x20\x43\x8d\x36\x06\xe6\x33\x6f\xb4\x0c\x75\x26\xc4\x2a\xcc\x67\xc4\x03\x03\x5c\x9e\xf6\x12\x6c\x40\x7b\x4e\xa4\xc9\xeb\x98\x01\xdf\x4f\xbc\x05\xe4\x3d\xbc\x04\xfc\x94\x60\xed\x5b\x9c\x52\xcf\xec\xfc\xb7\xb9\x87\xd5\xac\x5b\xd2\x68\x68\x0c\xb5\x93\xed\x71\x41\x0c\x58\x1a\x85\x0c\xd2\x8d\x3b\xc7\x42\xe1\xc6\x74\xda\x04\x78\xae\xc6\x4d\x86\x7d\xd2\x32\x65\x8a\xfc\xc8\xd8\x06\x24\x86\xc5\x2e\x26\x11\x86\x4e\xdb\x3f\x27\x73\x8f\x71\x79\x98\xd6\xc6\x8d\x82\xc3\x12\x10\xa6\x48\x78\x46\x53\x56\xe4\x79\x9e\xf4\x4f\xad\x25\x59\x67\x1b\xe0\x50\xbe\x29\x32\xbd\xc2\xb0\x78\x28\xb8\x48\xb5\xf6\xc4\x64\x38\x53\xc0\x56\x38\xe8\x4e\x47\x39\x5a\x68\x3a\x0f\x7d\xe4\x00\x65\x0d\xe8\x96\x73\xdf\x60\x62\x65\x08\x5b\x55\x3c\x98\xa9\x48\xab\x94\x5b\xc0\x35\x39\xaf\xe5\x23\xdf\xab\x98\x0f\x27\x93\x87\x5f\x6f\xe8\xaa\x2e\x89\x3e\xca\xcf\x46\xe8\xa1\xc6\xf3\x79\xe4\x45\xb2\x4b\x0d\xaf\xb2\x4e\x56\x88\xf8\x17\x25\x79\xd7\x78\x17\x07\x76\x72\xa8\x3b\x7d\xa8\x41\x58\xcf\xe3\xcc\x89\xf0\x29\xa6\x97\x54\x37\x82\x43\x6c\x64\xc7\x03\xaa\xf1\x4c\xf9\x71\xaa\x45\x95\xee\x73\xde\x19\x41\x0d\x18\xe0\x83\xb7\x24\xcf\x68\xeb\x05\x95\x1a\x61\x2d\x98\x32\xa5\x41\xe0\x84\xcd\x8a\xc1\xba\xc4\xbd\x21\xff\x19\xc1\x9d\xa8\x6b\xda\x32\xbd\xba\x14\x39\xbe\x47\x33\xbb\x71\xb0\x05\xf1\x86\xb0\x97\xd0\x2b\x0c\x38\x5a\x95\xac\x04\x0b\xe9\x80\xd3\xae\x32\xaf\xa8\x86\x3e\xf8\x1b\x1c\x7a\x0d\x0a\x85\xb7\xa2\x9c\xa9\x05\x4e\xc8\xb0\xc6\x8e\x16\x1a\x03\x47\x85\x2d\x2a\x2f\xf4\x4a\xdb\x7f\x48\x8a\xa5\xae\x58\x21\xce\xea\x35\x24\xfc\xd3\x68\x21\x41\xa1\x6d\xbc\x83\x89\xab\x1f\x13\x74\xd3\x8b\x1a\x7d\xbd\xc9\x59\xda\xae\x54\x4b\xb7\x37\x2e\x38\x77\xcb\xd9\xa4\x96\x45\xdc\x7f\x44\x70\x5d\xbc\x4f\x76\xfa\x0a\xd1\xce\x8a\xa4\x96\xef\xa8\xc0\x40\xf0\x40\x40\xa6\xd0\x8a\x43\xcc\xfc\x74\x22\x63\x01\xd4\x34\xc4\x2e\xb4\xc1\xd9\x94\x7a\x06\xfc\x4c\xee\xab\x2c\xf7\x56\xd7\x98\x48\x14\x21\x38\x1b\x0c\xad\xbf\x54\x93\xa3\x91\x54\x07\xff\xfa\x16\x65\xe9\x15\x8a\x19\x95\x10\x00\x09\xa3\x0a\x22\xb5\x56\xa3\x4d\x5c\xe7\xfa\x5d\x25\x7d\xf6\x2c\xba\x61\xfa\x01\x72\xe2\x01\x6a\xc1\x29\xb3\x2d\x9c\xb7\x8b\xf5\x9e\x3d\x8c\x9e\x52\xce\xf5\xbc\xcf\x7d\x7b\xe1\x92\x95\x30\x21\x1a\xa7\x61\x47\x52\x03\x87\x45\x2f\x04\xdf\xf2\xd5\xa3\x9d\xfa\xba\xe5\xb2\x5a\xdc\x5e\xca\x56\x73\x9c\xa9\x76\x9d\xec\xf1\x9b\x0f\x35\x19\x57\xe9\xd3\x7b\x5c\x7d\xb8\x06\xbd\x9b\x33\x0b\x95\xa2\xab\xfc\x41\x87\xf7\x71\xc7\xe7\x0c\x8f\x99\xca\x2c\x32\x19\x5f\x47\x1d\x6c\x3c\xad\x06\xae\x97\x2b\x0d\x31\x70\x41\xac\x49\x0a\x2d\xbc\xab\x88\xa3\x87\x7a\x38\x18\xbf\x22\xcf\x5c\xf5\x0d\x82\x6d\x4e\x2d\xbe\x6f\x3f\x6d\xce\xa3\xfc\x8d\xdd\xf4\xfc\xb1\xd8\xb4\x68\x44\xdb\xfb\x58\xec\x2a\xcb\xff\x98\xe7\xd9\x1c\x30\x0c\xef\x42\x80\x00\x3f\x1b\x90\x4e\x18\x89\xbd\x12\xd4\xa0\xe9\xce\xa6\x43\x05\xeb\x4e\x1a\x9e\x89\x4f\xae\xd3\xcd\x35\xbc\xc9\xfb\xb0\x9a\xe1\xa7\x3d\x59\x07\xdd\x06\xb3\x9f\xce\x07\x60\x10\x2d\x8c\x97\x24\x5a\x1a\x36\x6c\xcf\x53\xcd\x35\xbb\xcf\xb9\xdb\xfa\xd1\x0a\x29\x8c\x3c\x6d\xdf\xa2\xac\x5e\x3f\xce\x19\x56\xa7\x31\x3a\x73\x4b\xb3\xfb\xf2\x32\xfc\xac\x7c\x5a\x3c\xf8\x1b\x50\x3e\x5d\x30\xda\x92\xd1\xb8\xce\xba\xec\x0d\xd6\xd1\xaf\xcd\xed\xcd\x89\x9f\xbf\x2c\x7e\x05\xaf\x6b\xfb\x97\x8e\x86\x23\x27\xf4\x1c\xe6\xef\x19\x97\x65\x41\x76\xdf\xe2\xb8\x0a\xa0\x28\x40\x3a\x4b\x45\x3c\x39\x11\x46\x1d\xc0\x40\x81\xce\x92\x19\x40\x52\xdb\x77\xdd\xf7\xdc\x96\xa4\xbb\x3a\x3f\xca\x72\xa7\x27\x40\xf7\xbb\x8e\xf8\x8b\x58\xe8\xe9\xf5\xaa\xfe\xc6\xfa\x50\xb8\xe5\x5a\xc4\x3d\xec\xf3\x1b\xed\xcb\x24\x5b\xee\x0a\xd6\xaf\xbf\x8d\x95\x0e\x27\x34\xd6\x73\xe8\xd3\x98\xa9\x34\x08\x43\xbb\xc2\x1b\x35\x36\x7e\xf4\x42\xe1\xe3\x74\xa3\x52\xa1\x47\x66\x97\x32\xd2\x97\x5a\x68\x1b\xb2\xe2\xa0\xe1\x6c\x38\xfb\xef\x3d\x52\xa3\xdb\x75\x67\x6a\x6d\xe5\x39\xff\x2a\x64\x25\xe1\x96\xd1\xa2\x37\x03\x6c\x2b\x6c\xa8\xf0\xc7\x57\x4f\x0e\x94\xad\x04\x5f\xf8\xc6\xd5\xe3\x71\x0b\xf0\xe9\x7b\xb2\xfe\xd8\xd7\xdb\xf5\x7e\xec\x08\x7b\xa5\xfe\x93\xe7\x97\xfe\x38\xfb\xf4\x2f\x44\x60\x46\xa1\xf3\x0c\x64\x18\x2c\x08\x0e\x9b\x77\xa5\xa0\x05\x4d\xcd\x10\x69\xef\x70\xae\xf9\x10\xf3\xcb\xfc\xbb\xc6\x56\x68\x0f\x42\x29\x50\x65\x2b\x16\xe6\xfe\x58\x3e\x7e\x94\x23\x9a\x86\x49\xc8\xea\xf2\x2b\xc9\x39\xda\x8d\x19\x7e\x07\xf6\x65\xdd\xd7\x9b\xaf\x5e\xb0\x03\xd6\xa7\x69\x76\x23\xdd\xf9\x0c\xf6\xa3\x2d\x15\xdd\x15\x49\x61\x2d\xb8\x59\x66\x79\xd3\xc7\x9d\x0f\x13\xbd\xe4\xe9\xa7\xcd\x4b\x70\x99\x75\x01\x46\x7d\xa8\x9c\x6b\xec\xbf\xf2\xbe\xec\x23\x19\xfb\xb1\xa4\xf6\xa3\x3f\xbe\xe4\x2d\x5a\x2f\x34\xda\x74\xb6\x9b\x87\x09\x20\xc9\x38\x30\x2e\x57\xd0\xfe\x92\xff\xf9\xc7\xb7\xef\xdf\xfe\xfc\xfa\x9d\xa4\xf4\x4d\xac\xf4\x5d\x92\x42\x53\x7e\x77\x44\xfa\x63\xe5\x6a\x3d\xe0\x93\xb1\x0a\xcb\x20\xd6\xc7\x12\x5d\xe5\x0f\x1f\x91\x72\xd5\x64\x32\x88\x89\x05\xa6\xf9\x9f\x85\x86\x36\xb7\x21\x88\x10\xac\xb2\x11\x59\xe8\xb3\xaa\x6b\xd8\xd7\xa9\xf0\xc7\xb7\x6f\xff\xfe\xfa\x5d\xa1\x95\xd4\x02\x9f\xfe\x32\xe1\xaf\xf2\x3e\x79\x4b\xe3\xcc\x32\x2d\x70\xe9\x51\x81\xa3\x85\xdb\xad\xbb\xde\xd1\xb8\x4d\xf5\xc3\xeb\xd3\x97\x4f\x9f\xff\xff\xe6\xa0\x7c\xfb\xfd\x6b\x1a\xd8\xdf\xbf\x7e\xaf\x10\x38\xf8\x8d\xd3\xf7\x16\xe1\x6d\x8f\x11\xe9\x1c\x1c\x5e\x99\x4c\xcb\x9c\x2f\x39\x83\xee\xee\x6d\xa7\x9d\x79\x81\xa5\x67\xb0\x64\xfa\x3b\x6b\xdd\x5d\x7c\x75\x38\x09\x06\x41\x85\x0f\xfa\x31\x58\x54\x60\x24\x9c\x65\x4e\xbe\x7c\xfa\xfc\x5b\xfa\x38\xe7\xc3\xce\xc8\x3f\xbc\x81\x2f\x9f\x3e\xff\x5f\xc3\xd4\xa2\x8d\xf3\xee\x25\x4f\x5f\xd5\xe5\x15\xe8\x26\x77\xc0\x75\xbc\xac\x3d\x9c\x44\x7d\xe8\xcb\xd3\x1f\xc7\xc2\xd8\x82\xb8\xee\xd3\xce\x25\x8b\xba\x86\x85\x86\x73\x60\x49\x74\xc4\x18\x9d\xc6\x6b\x08\xf2\xb4\x12\xb7\xab\x1d\x26\x49\xdc\x2b\xcf\x50\x57\x62\x84\x39\xd5\xd5\x00\xeb\x5e\x86\xdd\x88\x24\x53\x7c\xc8\xc3\x2e\xd8\x79\x9b\xbf\x55\xc2\xbd\x81\xa2\x1c\xda\xf8\x85\xe5\xb4\x16\x70\xe8\xcc\x97\xdc\xd8\xea\xed\xc3\xe0\x25\xd1\x0c\x64\x05\xf1\xb5\x63\xc8\xf1\xd0\x73\xfe\xbe\x03\xe9\xf3\x01\xd6\x79\x75\xa2\x62\xc8\x28\xbc\x81\xd6\x07\x40\x53\xc6\x6b\xe7\x0c\xc1\xec\x4e\xe4\x4d\x99\xcc\xf1\xd1\x76\x49\x87\x8a\xff\x89\x5a\x04\xfa\x8b\x86\x73\xf1\x26\x6d\xd3\x89\x0f\x9a\x4a\xe8\xb0\xa4\x0d\x53\xfe\x25\x98\x7e\xb0\x9b\xf1\x52\xc6\xe7\xf1\x67\x36\xba\x9b\x6c\x58\x28\x33\x86\x86\xd8\xe5\x05\x1c\xd8\x0b\x3e\x65\xc1\x46\x72\xeb\x0e\x59\x6d\x5f\x39\x9b\xbd\x4e\x5e\x66\xcf\x84\xeb\xf0\x11\xc7\x28\xe5\x64\xcb\xd3\xcb\x78\x26\x62\x10\x65\x37\x4d\xe3\x05\xa1\x7f\xa4\x62\xba\xb6\x79\x1c\xf3\x2c\xc9\x95\x19\x72\x19\x9a\x6c\xc8\xbf\x64\xd9\x98\xac\xca\x88\x33\xc7\x02\x0d\x9a\x32\xcb\x0c\x80\xb3\xd9\xe5\x98\x76\x7a\xde\x4b\x85\x19\x72\x5d\x36\xcc\x9b\xb1\xee\x44\xa7\xc9\x54\x8c\x75\x07\x91\xc6\xda\xc4\xbd\x38\x41\x98\x2b\x2a\x1a\x21\xbe\xe4\x36\x78\x1b\x95\xf5\x79\x8c\x8c\x8a\x2c\x06\x8e\xbf\x06\xb1\x7f\x8b\x53\xf1\x4b\x2a\x0f\xef\xb3\xee\x7d\xaf\xca\x9d\xf0\x70\x94\x39\xd1\xf4\x2c\x54\x44\x8e\x34\x10\xbf\x92\x74\x8e\x14\xc8\x00\x3c\x4a\x77\xf0\x36\x4b\x7b\xae\x21\xc4\xcf\xc6\x3d\x58\x2f\x60\x36\x59\x50\x32\x06\xeb\xb5\xb3\xb3\x59\xb5\x5e\xc4\xcb\xcf\xf2\x16\x25\x9c\x10\x76\x7c\xf3\x49\x93\x46\x34\x4b\x43\x3a\x31\x85\x1b\x33\xff\xf9\xe4\xe8\xa8\x85\x3f\xce\x00\x2e\x47\x5e\x34\xd8\x25\xa8\xf2\x37\x38\x4c\x1f\x2b\xaa\xe1\x43\x5a\x34\xe3\x89\xd8\x28\x7b\x6a\x39\x15\x79\x6d\xea\xb1\xff\x74\xe3\x22\x45\xb8\x39\xe9\xb8\x8c\x84\x46\x6a\xaf\xc0\x0a\xad\x7f\xe9\xda\xc9\x06\x2b\xd9\xa0\x30\x8a\xd3\x7f\xd7\xf0\xdf\x00\x00\x00\xff\xff\x01\xd9\x86\x68\xe4\x46\x00\x00")

func redirectsRedirectsCsvBytes() ([]byte, error) {
	return bindataRead(
		_redirectsRedirectsCsv,
		"redirects/redirects.csv",
	)
}

func redirectsRedirectsCsv() (*asset, error) {
	bytes, err := redirectsRedirectsCsvBytes()
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	info := bindataFileInfo{name: "redirects/redirects.csv", size: 17871, mode: os.FileMode(420), modTime: time.Unix(1519298006, 0)}
=======
	info := bindataFileInfo{name: "redirects/redirects.csv", size: 18148, mode: os.FileMode(420), modTime: time.Unix(1518599411, 0)}
>>>>>>> develop
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/error.tmpl": templatesErrorTmpl,
	"templates/main.tmpl": templatesMainTmpl,
	"templates/partials/footer.tmpl": templatesPartialsFooterTmpl,
	"templates/partials/header.tmpl": templatesPartialsHeaderTmpl,
	"redirects/redirects.csv": redirectsRedirectsCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"redirects": &bintree{nil, map[string]*bintree{
		"redirects.csv": &bintree{redirectsRedirectsCsv, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"error.tmpl": &bintree{templatesErrorTmpl, map[string]*bintree{}},
		"main.tmpl": &bintree{templatesMainTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"footer.tmpl": &bintree{templatesPartialsFooterTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{templatesPartialsHeaderTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

