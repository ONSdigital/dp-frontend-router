// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package analyticstest

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"sync"
)

// SQSClientMock is a mock implementation of analytics.SQSClient.
//
//     func TestSomethingThatUsesSQSClient(t *testing.T) {
//
//         // make and configure a mocked analytics.SQSClient
//         mockedSQSClient := &SQSClientMock{
//             SendMessageFunc: func(ctx context.Context, params *sqs.SendMessageInput, optFns ...func(*sqs.Options)) (*sqs.SendMessageOutput, error) {
// 	               panic("mock out the SendMessage method")
//             },
//         }
//
//         // use mockedSQSClient in code that requires analytics.SQSClient
//         // and then make assertions.
//
//     }
type SQSClientMock struct {
	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(ctx context.Context, params *sqs.SendMessageInput, optFns ...func(*sqs.Options)) (*sqs.SendMessageOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *sqs.SendMessageInput
			// OptFns is the optFns argument value.
			OptFns []func(*sqs.Options)
		}
	}
	lockSendMessage sync.RWMutex
}

// SendMessage calls SendMessageFunc.
func (mock *SQSClientMock) SendMessage(ctx context.Context, params *sqs.SendMessageInput, optFns ...func(*sqs.Options)) (*sqs.SendMessageOutput, error) {
	if mock.SendMessageFunc == nil {
		panic("SQSClientMock.SendMessageFunc: method is nil but SQSClient.SendMessage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *sqs.SendMessageInput
		OptFns []func(*sqs.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	mock.lockSendMessage.Unlock()
	return mock.SendMessageFunc(ctx, params, optFns...)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//     len(mockedSQSClient.SendMessageCalls())
func (mock *SQSClientMock) SendMessageCalls() []struct {
	Ctx    context.Context
	Params *sqs.SendMessageInput
	OptFns []func(*sqs.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *sqs.SendMessageInput
		OptFns []func(*sqs.Options)
	}
	mock.lockSendMessage.RLock()
	calls = mock.calls.SendMessage
	mock.lockSendMessage.RUnlock()
	return calls
}
