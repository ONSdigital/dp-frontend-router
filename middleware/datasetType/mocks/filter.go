// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/filter"
	"github.com/ONSdigital/dp-frontend-router/middleware/datasetType"
	"sync"
)

// Ensure, that FilterClientMock does implement datasetType.FilterClient.
// If this is not the case, regenerate this file with moq.
var _ datasetType.FilterClient = &FilterClientMock{}

// FilterClientMock is a mock implementation of datasetType.FilterClient.
//
//	func TestSomethingThatUsesFilterClient(t *testing.T) {
//
//		// make and configure a mocked datasetType.FilterClient
//		mockedFilterClient := &FilterClientMock{
//			GetJobStateFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterID string) (filter.Model, string, error) {
//				panic("mock out the GetJobState method")
//			},
//		}
//
//		// use mockedFilterClient in code that requires datasetType.FilterClient
//		// and then make assertions.
//
//	}
type FilterClientMock struct {
	// GetJobStateFunc mocks the GetJobState method.
	GetJobStateFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterID string) (filter.Model, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetJobState holds details about calls to the GetJobState method.
		GetJobState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// DownloadServiceToken is the downloadServiceToken argument value.
			DownloadServiceToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// FilterID is the filterID argument value.
			FilterID string
		}
	}
	lockGetJobState sync.RWMutex
}

// GetJobState calls GetJobStateFunc.
func (mock *FilterClientMock) GetJobState(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterID string) (filter.Model, string, error) {
	if mock.GetJobStateFunc == nil {
		panic("FilterClientMock.GetJobStateFunc: method is nil but FilterClient.GetJobState was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		CollectionID         string
		FilterID             string
	}{
		Ctx:                  ctx,
		UserAuthToken:        userAuthToken,
		ServiceAuthToken:     serviceAuthToken,
		DownloadServiceToken: downloadServiceToken,
		CollectionID:         collectionID,
		FilterID:             filterID,
	}
	mock.lockGetJobState.Lock()
	mock.calls.GetJobState = append(mock.calls.GetJobState, callInfo)
	mock.lockGetJobState.Unlock()
	return mock.GetJobStateFunc(ctx, userAuthToken, serviceAuthToken, downloadServiceToken, collectionID, filterID)
}

// GetJobStateCalls gets all the calls that were made to GetJobState.
// Check the length with:
//
//	len(mockedFilterClient.GetJobStateCalls())
func (mock *FilterClientMock) GetJobStateCalls() []struct {
	Ctx                  context.Context
	UserAuthToken        string
	ServiceAuthToken     string
	DownloadServiceToken string
	CollectionID         string
	FilterID             string
} {
	var calls []struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		CollectionID         string
		FilterID             string
	}
	mock.lockGetJobState.RLock()
	calls = mock.calls.GetJobState
	mock.lockGetJobState.RUnlock()
	return calls
}
