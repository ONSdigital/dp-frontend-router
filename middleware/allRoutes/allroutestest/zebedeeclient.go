// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package allroutestest

import (
	"context"
	"github.com/ONSdigital/dp-frontend-router/middleware/allRoutes"
	"net/http"
	"sync"
)

// Ensure, that ZebedeeClientMock does implement allRoutes.ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ allRoutes.ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of allRoutes.ZebedeeClient.
//
//     func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
//         // make and configure a mocked allRoutes.ZebedeeClient
//         mockedZebedeeClient := &ZebedeeClientMock{
//             GetWithHeadersFunc: func(ctx context.Context, userAccessToken string, path string) ([]byte, http.Header, error) {
// 	               panic("mock out the GetWithHeaders method")
//             },
//         }
//
//         // use mockedZebedeeClient in code that requires allRoutes.ZebedeeClient
//         // and then make assertions.
//
//     }
type ZebedeeClientMock struct {
	// GetWithHeadersFunc mocks the GetWithHeaders method.
	GetWithHeadersFunc func(ctx context.Context, userAccessToken string, path string) ([]byte, http.Header, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetWithHeaders holds details about calls to the GetWithHeaders method.
		GetWithHeaders []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAccessToken is the userAccessToken argument value.
			UserAccessToken string
			// Path is the path argument value.
			Path string
		}
	}
	lockGetWithHeaders sync.RWMutex
}

// GetWithHeaders calls GetWithHeadersFunc.
func (mock *ZebedeeClientMock) GetWithHeaders(ctx context.Context, userAccessToken string, path string) ([]byte, http.Header, error) {
	if mock.GetWithHeadersFunc == nil {
		panic("ZebedeeClientMock.GetWithHeadersFunc: method is nil but ZebedeeClient.GetWithHeaders was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		UserAccessToken string
		Path            string
	}{
		Ctx:             ctx,
		UserAccessToken: userAccessToken,
		Path:            path,
	}
	mock.lockGetWithHeaders.Lock()
	mock.calls.GetWithHeaders = append(mock.calls.GetWithHeaders, callInfo)
	mock.lockGetWithHeaders.Unlock()
	return mock.GetWithHeadersFunc(ctx, userAccessToken, path)
}

// GetWithHeadersCalls gets all the calls that were made to GetWithHeaders.
// Check the length with:
//     len(mockedZebedeeClient.GetWithHeadersCalls())
func (mock *ZebedeeClientMock) GetWithHeadersCalls() []struct {
	Ctx             context.Context
	UserAccessToken string
	Path            string
} {
	var calls []struct {
		Ctx             context.Context
		UserAccessToken string
		Path            string
	}
	mock.lockGetWithHeaders.RLock()
	calls = mock.calls.GetWithHeaders
	mock.lockGetWithHeaders.RUnlock()
	return calls
}
